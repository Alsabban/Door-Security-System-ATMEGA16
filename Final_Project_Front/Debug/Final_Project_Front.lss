
Final_Project_Front.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000178  00800060  00002df6  00002e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001d8  008001d8  00003002  2**0
                  ALLOC
  3 .stab         0000309c  00000000  00000000  00003004  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001963  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 11 	call	0x230e	; 0x230e <main>
      8a:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ec       	ldi	r26, 0xC0	; 192
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ec       	ldi	r24, 0xC0	; 192
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ec       	ldi	r22, 0xC0	; 192
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 53       	subi	r30, 0x38	; 56
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>


void ADC_init(ADC_ConfigType * config){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* Pass each struct value to its corresponding register */
	ADMUX= (config->ref_volt)|(config->data_adjust);
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	90 81       	ld	r25, Z
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	89 2b       	or	r24, r25
     e4e:	8c 93       	st	X, r24
	ADCSRA=(config->adc_enable|config->autoTrigger_enable)|(config->interrupt_enable)|(config->prescaler);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	92 81       	ldd	r25, Z+2	; 0x02
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	85 81       	ldd	r24, Z+5	; 0x05
     e60:	98 2b       	or	r25, r24
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	98 2b       	or	r25, r24
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	89 2b       	or	r24, r25
     e72:	8c 93       	st	X, r24
	SFIOR=(config->autoTrigger_source);
     e74:	a0 e5       	ldi	r26, 0x50	; 80
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	86 81       	ldd	r24, Z+6	; 0x06
     e7e:	8c 93       	st	X, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num){
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	/* Disregard any bit after bit 3 */
	ch_num&=0x0E;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8e 70       	andi	r24, 0x0E	; 14
     e9a:	89 83       	std	Y+1, r24	; 0x01
	/* Clear bits 0->3 */
	ADMUX&=0xE0;
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8c 93       	st	X, r24
	/* Insert channel number */
	ADMUX|=ch_num;
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	90 81       	ld	r25, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24
	/* Start conversion */
	SET_BIT(ADCSRA,ADSC);
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24
	/* Polling interrupt flag */
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	80 71       	andi	r24, 0x10	; 16
     ed4:	90 70       	andi	r25, 0x00	; 0
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	b9 f3       	breq	.-18     	; 0xec8 <ADC_readChannel+0x3e>
	/* Clear interrupt flag */
	SET_BIT(ADCSRA,ADIF);
     eda:	a6 e2       	ldi	r26, 0x26	; 38
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e2       	ldi	r30, 0x26	; 38
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 61       	ori	r24, 0x10	; 16
     ee6:	8c 93       	st	X, r24
	/* return data register */
	return ADC;
     ee8:	e4 e2       	ldi	r30, 0x24	; 36
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <BUZZER_init>:

/*******************************************************************************
 *							function Definition							   *
 ******************************************************************************/
void BUZZER_init(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN, PIN_OUTPUT);
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	67 e0       	ldi	r22, 0x07	; 7
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_LOW);
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>

}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <BUZZER_on>:
void BUZZER_on(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_HIGH);
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	67 e0       	ldi	r22, 0x07	; 7
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <BUZZER_off>:
void BUZZER_off(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_LOW);
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	67 e0       	ldi	r22, 0x07	; 7
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DcMotor_Init>:
 *******************************************************************************/
#include "dc_motor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Set defined motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, PIN_OUTPUT);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, PIN_OUTPUT);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>

	/* Initially stop the motor */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed){
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <DcMotor_Rotate+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <DcMotor_Rotate+0x8>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	6a 83       	std	Y+2, r22	; 0x02

	/* Start the PWM module with duty cycle equal to the given speed */
	PWM_Timer0_Start(speed);
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	0e 94 ee 14 	call	0x29dc	; 0x29dc <PWM_Timer0_Start>

	switch (state) {
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 83       	std	Y+4, r19	; 0x04
     f9e:	2b 83       	std	Y+3, r18	; 0x03
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	01 f1       	breq	.+64     	; 0xfea <DcMotor_Rotate+0x6a>
     faa:	2b 81       	ldd	r18, Y+3	; 0x03
     fac:	3c 81       	ldd	r19, Y+4	; 0x04
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	29 f0       	breq	.+10     	; 0xfbe <DcMotor_Rotate+0x3e>
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	61 f0       	breq	.+24     	; 0xfd4 <DcMotor_Rotate+0x54>
     fbc:	20 c0       	rjmp	.+64     	; 0xffe <DcMotor_Rotate+0x7e>

	/* Stop the motor */
	case STOP:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
     fd2:	15 c0       	rjmp	.+42     	; 0xffe <DcMotor_Rotate+0x7e>
		break;

		/* Rotate Clockwise */
	case CLOCKWISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_HIGH);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <DcMotor_Rotate+0x7e>
		break;

		/* Rotate Anti-clockwise */
	case ANTICLOCKWISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_HIGH);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <GPIO_setupPinDirection+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <GPIO_setupPinDirection+0x8>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02
    101e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	08 f0       	brcs	.+2      	; 0x1028 <GPIO_setupPinDirection+0x1c>
    1026:	d5 c0       	rjmp	.+426    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	08 f0       	brcs	.+2      	; 0x1030 <GPIO_setupPinDirection+0x24>
    102e:	d1 c0       	rjmp	.+418    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3d 83       	std	Y+5, r19	; 0x05
    1038:	2c 83       	std	Y+4, r18	; 0x04
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <GPIO_setupPinDirection+0x3a>
    1044:	43 c0       	rjmp	.+134    	; 0x10cc <GPIO_setupPinDirection+0xc0>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	2c f4       	brge	.+10     	; 0x105a <GPIO_setupPinDirection+0x4e>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	71 f0       	breq	.+28     	; 0x1074 <GPIO_setupPinDirection+0x68>
    1058:	bc c0       	rjmp	.+376    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <GPIO_setupPinDirection+0x5a>
    1064:	5f c0       	rjmp	.+190    	; 0x1124 <GPIO_setupPinDirection+0x118>
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <GPIO_setupPinDirection+0x66>
    1070:	85 c0       	rjmp	.+266    	; 0x117c <GPIO_setupPinDirection+0x170>
    1072:	af c0       	rjmp	.+350    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	a1 f4       	brne	.+40     	; 0x10a2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <GPIO_setupPinDirection+0x8c>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <GPIO_setupPinDirection+0x88>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	98 c0       	rjmp	.+304    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10a2:	aa e3       	ldi	r26, 0x3A	; 58
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ea e3       	ldi	r30, 0x3A	; 58
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GPIO_setupPinDirection+0xb4>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <GPIO_setupPinDirection+0xb0>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	83 c0       	rjmp	.+262    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10d2:	a7 e3       	ldi	r26, 0x37	; 55
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e3       	ldi	r30, 0x37	; 55
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_setupPinDirection+0xe4>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_setupPinDirection+0xe0>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	6c c0       	rjmp	.+216    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10fa:	a7 e3       	ldi	r26, 0x37	; 55
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e7 e3       	ldi	r30, 0x37	; 55
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <GPIO_setupPinDirection+0x10c>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <GPIO_setupPinDirection+0x108>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	57 c0       	rjmp	.+174    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	a1 f4       	brne	.+40     	; 0x1152 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    112a:	a4 e3       	ldi	r26, 0x34	; 52
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e4 e3       	ldi	r30, 0x34	; 52
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_setupPinDirection+0x13c>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_setupPinDirection+0x138>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	40 c0       	rjmp	.+128    	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1152:	a4 e3       	ldi	r26, 0x34	; 52
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e3       	ldi	r30, 0x34	; 52
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <GPIO_setupPinDirection+0x164>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <GPIO_setupPinDirection+0x160>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	2b c0       	rjmp	.+86     	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	a1 f4       	brne	.+40     	; 0x11aa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1182:	a1 e3       	ldi	r26, 0x31	; 49
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e1 e3       	ldi	r30, 0x31	; 49
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_setupPinDirection+0x194>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_setupPinDirection+0x190>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11aa:	a1 e3       	ldi	r26, 0x31	; 49
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_setupPinDirection+0x1bc>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_setupPinDirection+0x1b8>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <GPIO_writePin+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <GPIO_writePin+0x8>
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6a 83       	std	Y+2, r22	; 0x02
    11f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 30       	cpi	r24, 0x08	; 8
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_writePin+0x1c>
    11fc:	d5 c0       	rjmp	.+426    	; 0x13a8 <GPIO_writePin+0x1c6>
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	08 f0       	brcs	.+2      	; 0x1206 <GPIO_writePin+0x24>
    1204:	d1 c0       	rjmp	.+418    	; 0x13a8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3d 83       	std	Y+5, r19	; 0x05
    120e:	2c 83       	std	Y+4, r18	; 0x04
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <GPIO_writePin+0x3a>
    121a:	43 c0       	rjmp	.+134    	; 0x12a2 <GPIO_writePin+0xc0>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <GPIO_writePin+0x4e>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	71 f0       	breq	.+28     	; 0x124a <GPIO_writePin+0x68>
    122e:	bc c0       	rjmp	.+376    	; 0x13a8 <GPIO_writePin+0x1c6>
    1230:	2c 81       	ldd	r18, Y+4	; 0x04
    1232:	3d 81       	ldd	r19, Y+5	; 0x05
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x5a>
    123a:	5f c0       	rjmp	.+190    	; 0x12fa <GPIO_writePin+0x118>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <GPIO_writePin+0x66>
    1246:	85 c0       	rjmp	.+266    	; 0x1352 <GPIO_writePin+0x170>
    1248:	af c0       	rjmp	.+350    	; 0x13a8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	a1 f4       	brne	.+40     	; 0x1278 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1250:	ab e3       	ldi	r26, 0x3B	; 59
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_writePin+0x8c>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_writePin+0x88>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	98 c0       	rjmp	.+304    	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1278:	ab e3       	ldi	r26, 0x3B	; 59
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	eb e3       	ldi	r30, 0x3B	; 59
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_writePin+0xb4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_writePin+0xb0>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	83 c0       	rjmp	.+262    	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	a1 f4       	brne	.+40     	; 0x12d0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_writePin+0xe4>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_writePin+0xe0>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	6c c0       	rjmp	.+216    	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12d0:	a8 e3       	ldi	r26, 0x38	; 56
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e8 e3       	ldi	r30, 0x38	; 56
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_writePin+0x10c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_writePin+0x108>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	57 c0       	rjmp	.+174    	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	a1 f4       	brne	.+40     	; 0x1328 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_writePin+0x13c>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_writePin+0x138>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	40 c0       	rjmp	.+128    	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1328:	a5 e3       	ldi	r26, 0x35	; 53
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_writePin+0x164>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_writePin+0x160>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	2b c0       	rjmp	.+86     	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a1 f4       	brne	.+40     	; 0x1380 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_writePin+0x194>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_writePin+0x190>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1380:	a2 e3       	ldi	r26, 0x32	; 50
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <GPIO_writePin+0x1bc>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <GPIO_writePin+0x1b8>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_readPin+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <GPIO_readPin+0x8>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13ca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 30       	cpi	r24, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_readPin+0x1c>
    13d2:	84 c0       	rjmp	.+264    	; 0x14dc <GPIO_readPin+0x124>
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <GPIO_readPin+0x24>
    13da:	80 c0       	rjmp	.+256    	; 0x14dc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3d 83       	std	Y+5, r19	; 0x05
    13e4:	2c 83       	std	Y+4, r18	; 0x04
    13e6:	4c 81       	ldd	r20, Y+4	; 0x04
    13e8:	5d 81       	ldd	r21, Y+5	; 0x05
    13ea:	41 30       	cpi	r20, 0x01	; 1
    13ec:	51 05       	cpc	r21, r1
    13ee:	79 f1       	breq	.+94     	; 0x144e <GPIO_readPin+0x96>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	9d 81       	ldd	r25, Y+5	; 0x05
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	91 05       	cpc	r25, r1
    13f8:	34 f4       	brge	.+12     	; 0x1406 <GPIO_readPin+0x4e>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	21 15       	cp	r18, r1
    1400:	31 05       	cpc	r19, r1
    1402:	69 f0       	breq	.+26     	; 0x141e <GPIO_readPin+0x66>
    1404:	6b c0       	rjmp	.+214    	; 0x14dc <GPIO_readPin+0x124>
    1406:	4c 81       	ldd	r20, Y+4	; 0x04
    1408:	5d 81       	ldd	r21, Y+5	; 0x05
    140a:	42 30       	cpi	r20, 0x02	; 2
    140c:	51 05       	cpc	r21, r1
    140e:	b9 f1       	breq	.+110    	; 0x147e <GPIO_readPin+0xc6>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <GPIO_readPin+0x64>
    141a:	49 c0       	rjmp	.+146    	; 0x14ae <GPIO_readPin+0xf6>
    141c:	5f c0       	rjmp	.+190    	; 0x14dc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    141e:	e9 e3       	ldi	r30, 0x39	; 57
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_readPin+0x7e>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_readPin+0x7a>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	88 23       	and	r24, r24
    1442:	19 f0       	breq	.+6      	; 0x144a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	49 c0       	rjmp	.+146    	; 0x14dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	47 c0       	rjmp	.+142    	; 0x14dc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    144e:	e6 e3       	ldi	r30, 0x36	; 54
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_readPin+0xae>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_readPin+0xaa>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	90 70       	andi	r25, 0x00	; 0
    1470:	88 23       	and	r24, r24
    1472:	19 f0       	breq	.+6      	; 0x147a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	31 c0       	rjmp	.+98     	; 0x14dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	2f c0       	rjmp	.+94     	; 0x14dc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    147e:	e3 e3       	ldi	r30, 0x33	; 51
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <GPIO_readPin+0xde>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <GPIO_readPin+0xda>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	90 70       	andi	r25, 0x00	; 0
    14a0:	88 23       	and	r24, r24
    14a2:	19 f0       	breq	.+6      	; 0x14aa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	19 c0       	rjmp	.+50     	; 0x14dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	17 c0       	rjmp	.+46     	; 0x14dc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14ae:	e0 e3       	ldi	r30, 0x30	; 48
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <GPIO_readPin+0x10e>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <GPIO_readPin+0x10a>
    14ca:	ca 01       	movw	r24, r20
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	90 70       	andi	r25, 0x00	; 0
    14d0:	88 23       	and	r24, r24
    14d2:	19 f0       	breq	.+6      	; 0x14da <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14da:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_setupPortDirection+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_setupPortDirection+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	90 f5       	brcc	.+100    	; 0x1568 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3c 83       	std	Y+4, r19	; 0x04
    150c:	2b 83       	std	Y+3, r18	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	d1 f0       	breq	.+52     	; 0x154c <GPIO_setupPortDirection+0x5e>
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <GPIO_setupPortDirection+0x3e>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <GPIO_setupPortDirection+0x54>
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <GPIO_setupPortDirection+0x7a>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <GPIO_setupPortDirection+0x68>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <GPIO_setupPortDirection+0x72>
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1542:	ea e3       	ldi	r30, 0x3A	; 58
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    154c:	e7 e3       	ldi	r30, 0x37	; 55
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	80 83       	st	Z, r24
			break;
		}
	}
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_writePort+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_writePort+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	90 f5       	brcc	.+100    	; 0x15f0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <GPIO_writePort+0x5e>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <GPIO_writePort+0x3e>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <GPIO_writePort+0x54>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <GPIO_writePort+0x7a>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_writePort+0x68>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <GPIO_writePort+0x72>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15ca:	eb e3       	ldi	r30, 0x3B	; 59
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15e8:	e2 e3       	ldi	r30, 0x32	; 50
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_readPort+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_readPort+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    160c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	90 f5       	brcc	.+100    	; 0x1678 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	d1 f0       	breq	.+52     	; 0x165c <GPIO_readPort+0x5e>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <GPIO_readPort+0x3e>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_readPort+0x54>
    163a:	1e c0       	rjmp	.+60     	; 0x1678 <GPIO_readPort+0x7a>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_readPort+0x68>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_readPort+0x72>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1652:	e9 e3       	ldi	r30, 0x39	; 57
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    165c:	e6 e3       	ldi	r30, 0x36	; 54
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1666:	e3 e3       	ldi	r30, 0x33	; 51
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <I2C_init>:
#include "i2c.h"
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void I2C_init(void) {
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWEN);
    1690:	a6 e5       	ldi	r26, 0x56	; 86
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e6 e5       	ldi	r30, 0x56	; 86
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	8c 93       	st	X, r24
	TWBR = 2;
    169e:	e0 e2       	ldi	r30, 0x20	; 32
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	80 83       	st	Z, r24
	TWSR = 0;
    16a6:	e1 e2       	ldi	r30, 0x21	; 33
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	10 82       	st	Z, r1
	TWAR = (0x01 << 1);
    16ac:	e2 e2       	ldi	r30, 0x22	; 34
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	80 83       	st	Z, r24
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <TWI_start>:

void TWI_start(void) {
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    16c2:	e6 e5       	ldi	r30, 0x56	; 86
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	84 ea       	ldi	r24, 0xA4	; 164
    16c8:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    16ca:	e6 e5       	ldi	r30, 0x56	; 86
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	88 23       	and	r24, r24
    16d2:	dc f7       	brge	.-10     	; 0x16ca <TWI_start+0x10>
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <I2C_stop>:


void I2C_stop(void){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    16e2:	e6 e5       	ldi	r30, 0x56	; 86
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	84 e9       	ldi	r24, 0x94	; 148
    16e8:	80 83       	st	Z, r24
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <I2C_writeByte>:



void I2C_writeByte(uint8 data){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    16fc:	e3 e2       	ldi	r30, 0x23	; 35
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	80 83       	st	Z, r24
	TWCR=(1<TWINT)|(1<<TWEN);
    1704:	e6 e5       	ldi	r30, 0x56	; 86
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	80 83       	st	Z, r24
}
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <I2C_getStatus>:

uint8 I2C_getStatus(void){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	uint8 status= TWSR|0xF8;
    171e:	e1 e2       	ldi	r30, 0x21	; 33
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	88 6f       	ori	r24, 0xF8	; 248
    1726:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <KEYPAD_getPressedKey+0x6>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    173e:	19 82       	std	Y+1, r1	; 0x01
	GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_setupPortDirection>
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1748:	1b 82       	std	Y+3, r1	; 0x03
    174a:	3e c0       	rjmp	.+124    	; 0x17c8 <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	98 2f       	mov	r25, r24
    1750:	9c 5f       	subi	r25, 0xFC	; 252
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	69 2f       	mov	r22, r25
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9c 01       	movw	r18, r24
    1764:	2c 5f       	subi	r18, 0xFC	; 252
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <KEYPAD_getPressedKey+0x40>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	2a 95       	dec	r18
    1774:	e2 f7       	brpl	.-8      	; 0x176e <KEYPAD_getPressedKey+0x3c>
    1776:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	69 81       	ldd	r22, Y+1	; 0x01
    177c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1780:	1a 82       	std	Y+2, r1	; 0x02
    1782:	1c c0       	rjmp	.+56     	; 0x17bc <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	6a 81       	ldd	r22, Y+2	; 0x02
    1788:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_readPin>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	99 f4       	brne	.+38     	; 0x17b6 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	98 2f       	mov	r25, r24
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	89 0f       	add	r24, r25
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	08 f3       	brcs	.-62     	; 0x1784 <KEYPAD_getPressedKey+0x52>
	uint8 col,row;
	uint8 keypad_port_value = 0;
	GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <KEYPAD_getPressedKey+0x9e>
    17ce:	be cf       	rjmp	.-132    	; 0x174c <KEYPAD_getPressedKey+0x1a>
    17d0:	bb cf       	rjmp	.-138    	; 0x1748 <KEYPAD_getPressedKey+0x16>

000017d2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <KEYPAD_4x4_adjustKeyNumber+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    17e0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3c 83       	std	Y+4, r19	; 0x04
    17ea:	2b 83       	std	Y+3, r18	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	88 30       	cpi	r24, 0x08	; 8
    17f2:	91 05       	cpc	r25, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    17f6:	70 c0       	rjmp	.+224    	; 0x18d8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	29 30       	cpi	r18, 0x09	; 9
    17fe:	31 05       	cpc	r19, r1
    1800:	5c f5       	brge	.+86     	; 0x1858 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    180c:	59 c0       	rjmp	.+178    	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	25 30       	cpi	r18, 0x05	; 5
    1814:	31 05       	cpc	r19, r1
    1816:	9c f4       	brge	.+38     	; 0x183e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1822:	48 c0       	rjmp	.+144    	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1824:	2b 81       	ldd	r18, Y+3	; 0x03
    1826:	3c 81       	ldd	r19, Y+4	; 0x04
    1828:	23 30       	cpi	r18, 0x03	; 3
    182a:	31 05       	cpc	r19, r1
    182c:	0c f0       	brlt	.+2      	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    182e:	45 c0       	rjmp	.+138    	; 0x18ba <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    183a:	39 c0       	rjmp	.+114    	; 0x18ae <KEYPAD_4x4_adjustKeyNumber+0xdc>
    183c:	68 c0       	rjmp	.+208    	; 0x190e <KEYPAD_4x4_adjustKeyNumber+0x13c>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	26 30       	cpi	r18, 0x06	; 6
    1844:	31 05       	cpc	r19, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1848:	41 c0       	rjmp	.+130    	; 0x18cc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	87 30       	cpi	r24, 0x07	; 7
    1850:	91 05       	cpc	r25, r1
    1852:	0c f0       	brlt	.+2      	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1854:	3e c0       	rjmp	.+124    	; 0x18d2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1856:	37 c0       	rjmp	.+110    	; 0x18c6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	2c 30       	cpi	r18, 0x0C	; 12
    185e:	31 05       	cpc	r19, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1862:	46 c0       	rjmp	.+140    	; 0x18f0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	8d 30       	cpi	r24, 0x0D	; 13
    186a:	91 05       	cpc	r25, r1
    186c:	5c f4       	brge	.+22     	; 0x1884 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    186e:	2b 81       	ldd	r18, Y+3	; 0x03
    1870:	3c 81       	ldd	r19, Y+4	; 0x04
    1872:	2a 30       	cpi	r18, 0x0A	; 10
    1874:	31 05       	cpc	r19, r1
    1876:	b1 f1       	breq	.+108    	; 0x18e4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	8b 30       	cpi	r24, 0x0B	; 11
    187e:	91 05       	cpc	r25, r1
    1880:	a4 f5       	brge	.+104    	; 0x18ea <KEYPAD_4x4_adjustKeyNumber+0x118>
    1882:	2d c0       	rjmp	.+90     	; 0x18de <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	2e 30       	cpi	r18, 0x0E	; 14
    188a:	31 05       	cpc	r19, r1
    188c:	b9 f1       	breq	.+110    	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	8e 30       	cpi	r24, 0x0E	; 14
    1894:	91 05       	cpc	r25, r1
    1896:	7c f1       	brlt	.+94     	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	2f 30       	cpi	r18, 0x0F	; 15
    189e:	31 05       	cpc	r19, r1
    18a0:	81 f1       	breq	.+96     	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0x130>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	80 31       	cpi	r24, 0x10	; 16
    18a8:	91 05       	cpc	r25, r1
    18aa:	71 f1       	breq	.+92     	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0x136>
    18ac:	30 c0       	rjmp	.+96     	; 0x190e <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    18ae:	87 e3       	ldi	r24, 0x37	; 55
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	2f c0       	rjmp	.+94     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    18b4:	88 e3       	ldi	r24, 0x38	; 56
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	2c c0       	rjmp	.+88     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    18ba:	89 e3       	ldi	r24, 0x39	; 57
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	29 c0       	rjmp	.+82     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    18c0:	85 e2       	ldi	r24, 0x25	; 37
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	26 c0       	rjmp	.+76     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    18c6:	84 e3       	ldi	r24, 0x34	; 52
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	23 c0       	rjmp	.+70     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    18cc:	85 e3       	ldi	r24, 0x35	; 53
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	20 c0       	rjmp	.+64     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    18d2:	86 e3       	ldi	r24, 0x36	; 54
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	1d c0       	rjmp	.+58     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    18d8:	8a e2       	ldi	r24, 0x2A	; 42
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	1a c0       	rjmp	.+52     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    18de:	81 e3       	ldi	r24, 0x31	; 49
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	17 c0       	rjmp	.+46     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    18e4:	82 e3       	ldi	r24, 0x32	; 50
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    18ea:	83 e3       	ldi	r24, 0x33	; 51
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	11 c0       	rjmp	.+34     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    18f0:	8d e2       	ldi	r24, 0x2D	; 45
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    18f6:	8d e0       	ldi	r24, 0x0D	; 13
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	0b c0       	rjmp	.+22     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    18fc:	80 e3       	ldi	r24, 0x30	; 48
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	08 c0       	rjmp	.+16     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1902:	8d e3       	ldi	r24, 0x3D	; 61
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1908:	8b e2       	ldi	r24, 0x2B	; 43
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1912:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <LCD_init>:
#include <util/delay.h>
#include "common_macros.h"
#include "lcd.h"
#include "gpio.h"

void LCD_init(void) {
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	66 e0       	ldi	r22, 0x06	; 6
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	64 e0       	ldi	r22, 0x04	; 4
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	65 e0       	ldi	r22, 0x05	; 5
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PIN_OUTPUT);
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_setupPortDirection>
	LCD_TWO_LINES_8BITS_MODE();
    1950:	88 e3       	ldi	r24, 0x38	; 56
    1952:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_CURSOR_OFF();
    1956:	8c e0       	ldi	r24, 0x0C	; 12
    1958:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_CLEAR_SCREEN();
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command) {
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	e9 97       	sbiw	r28, 0x39	; 57
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	65 e0       	ldi	r22, 0x05	; 5
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e8       	ldi	r26, 0x80	; 128
    1998:	bf e3       	ldi	r27, 0x3F	; 63
    199a:	8d ab       	std	Y+53, r24	; 0x35
    199c:	9e ab       	std	Y+54, r25	; 0x36
    199e:	af ab       	std	Y+55, r26	; 0x37
    19a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6d a9       	ldd	r22, Y+53	; 0x35
    19a4:	7e a9       	ldd	r23, Y+54	; 0x36
    19a6:	8f a9       	ldd	r24, Y+55	; 0x37
    19a8:	98 ad       	ldd	r25, Y+56	; 0x38
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	89 ab       	std	Y+49, r24	; 0x31
    19bc:	9a ab       	std	Y+50, r25	; 0x32
    19be:	ab ab       	std	Y+51, r26	; 0x33
    19c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_sendCommand+0x7c>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    19e4:	69 a9       	ldd	r22, Y+49	; 0x31
    19e6:	7a a9       	ldd	r23, Y+50	; 0x32
    19e8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ea:	9c a9       	ldd	r25, Y+52	; 0x34
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6d a9       	ldd	r22, Y+53	; 0x35
    19fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1a00:	8f a9       	ldd	r24, Y+55	; 0x37
    1a02:	98 ad       	ldd	r25, Y+56	; 0x38
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	98 ab       	std	Y+48, r25	; 0x30
    1a22:	8f a7       	std	Y+47, r24	; 0x2f
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_sendCommand+0xdc>
    1a26:	88 ec       	ldi	r24, 0xC8	; 200
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e a7       	std	Y+46, r25	; 0x2e
    1a2c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_sendCommand+0xca>
    1a36:	9e a7       	std	Y+46, r25	; 0x2e
    1a38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	98 ab       	std	Y+48, r25	; 0x30
    1a42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a46:	98 a9       	ldd	r25, Y+48	; 0x30
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_sendCommand+0xbe>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a50:	7a a9       	ldd	r23, Y+50	; 0x32
    1a52:	8b a9       	ldd	r24, Y+51	; 0x33
    1a54:	9c a9       	ldd	r25, Y+52	; 0x34
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
    1a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a64:	98 a9       	ldd	r25, Y+48	; 0x30
    1a66:	9c a7       	std	Y+44, r25	; 0x2c
    1a68:	8b a7       	std	Y+43, r24	; 0x2b
    1a6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_sendCommand+0x106>
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	66 e0       	ldi	r22, 0x06	; 6
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e8       	ldi	r26, 0x80	; 128
    1a86:	bf e3       	ldi	r27, 0x3F	; 63
    1a88:	8f a3       	std	Y+39, r24	; 0x27
    1a8a:	98 a7       	std	Y+40, r25	; 0x28
    1a8c:	a9 a7       	std	Y+41, r26	; 0x29
    1a8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6f a1       	ldd	r22, Y+39	; 0x27
    1a92:	78 a5       	ldd	r23, Y+40	; 0x28
    1a94:	89 a5       	ldd	r24, Y+41	; 0x29
    1a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8b a3       	std	Y+35, r24	; 0x23
    1aaa:	9c a3       	std	Y+36, r25	; 0x24
    1aac:	ad a3       	std	Y+37, r26	; 0x25
    1aae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6f a1       	ldd	r22, Y+39	; 0x27
    1aec:	78 a5       	ldd	r23, Y+40	; 0x28
    1aee:	89 a5       	ldd	r24, Y+41	; 0x29
    1af0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9a a3       	std	Y+34, r25	; 0x22
    1b10:	89 a3       	std	Y+33, r24	; 0x21
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <LCD_sendCommand+0x1ca>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	98 a3       	std	Y+32, r25	; 0x20
    1b1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_sendCommand+0x1b8>
    1b24:	98 a3       	std	Y+32, r25	; 0x20
    1b26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9a a3       	std	Y+34, r25	; 0x22
    1b30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	89 a1       	ldd	r24, Y+33	; 0x21
    1b34:	9a a1       	ldd	r25, Y+34	; 0x22
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <LCD_sendCommand+0x1ac>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b40:	8d a1       	ldd	r24, Y+37	; 0x25
    1b42:	9e a1       	ldd	r25, Y+38	; 0x26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	9e 8f       	std	Y+30, r25	; 0x1e
    1b56:	8d 8f       	std	Y+29, r24	; 0x1d
    1b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_sendCommand+0x1f4>
    1b60:	9e 8f       	std	Y+30, r25	; 0x1e
    1b62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	69 ad       	ldd	r22, Y+57	; 0x39
    1b68:	0e 94 bb 0a 	call	0x1576	; 0x1576 <GPIO_writePort>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e8       	ldi	r26, 0x80	; 128
    1b72:	bf e3       	ldi	r27, 0x3F	; 63
    1b74:	89 8f       	std	Y+25, r24	; 0x19
    1b76:	9a 8f       	std	Y+26, r25	; 0x1a
    1b78:	ab 8f       	std	Y+27, r26	; 0x1b
    1b7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8d 8b       	std	Y+21, r24	; 0x15
    1b96:	9e 8b       	std	Y+22, r25	; 0x16
    1b98:	af 8b       	std	Y+23, r26	; 0x17
    1b9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <LCD_sendCommand+0x256>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <LCD_sendCommand+0x2b6>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9a 8b       	std	Y+18, r25	; 0x12
    1c06:	89 8b       	std	Y+17, r24	; 0x11
    1c08:	89 89       	ldd	r24, Y+17	; 0x11
    1c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_sendCommand+0x2a4>
    1c10:	9a 8b       	std	Y+18, r25	; 0x12
    1c12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9c 8b       	std	Y+20, r25	; 0x14
    1c1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <LCD_sendCommand+0x298>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	98 8b       	std	Y+16, r25	; 0x10
    1c42:	8f 87       	std	Y+15, r24	; 0x0f
    1c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c46:	98 89       	ldd	r25, Y+16	; 0x10
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_sendCommand+0x2e0>
    1c4c:	98 8b       	std	Y+16, r25	; 0x10
    1c4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	66 e0       	ldi	r22, 0x06	; 6
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	8b 87       	std	Y+11, r24	; 0x0b
    1c64:	9c 87       	std	Y+12, r25	; 0x0c
    1c66:	ad 87       	std	Y+13, r26	; 0x0d
    1c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8f 83       	std	Y+7, r24	; 0x07
    1c84:	98 87       	std	Y+8, r25	; 0x08
    1c86:	a9 87       	std	Y+9, r26	; 0x09
    1c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_sendCommand+0x344>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_sendCommand+0x3a4>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_sendCommand+0x392>
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_sendCommand+0x386>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_sendCommand+0x3ce>
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d3e:	e9 96       	adiw	r28, 0x39	; 57
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data) {
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	e9 97       	sbiw	r28, 0x39	; 57
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	64 e0       	ldi	r22, 0x04	; 4
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	65 e0       	ldi	r22, 0x05	; 5
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	8d ab       	std	Y+53, r24	; 0x35
    1d84:	9e ab       	std	Y+54, r25	; 0x36
    1d86:	af ab       	std	Y+55, r26	; 0x37
    1d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d90:	98 ad       	ldd	r25, Y+56	; 0x38
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	89 ab       	std	Y+49, r24	; 0x31
    1da4:	9a ab       	std	Y+50, r25	; 0x32
    1da6:	ab ab       	std	Y+51, r26	; 0x33
    1da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1daa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dac:	7a a9       	ldd	r23, Y+50	; 0x32
    1dae:	8b a9       	ldd	r24, Y+51	; 0x33
    1db0:	9c a9       	ldd	r25, Y+52	; 0x34
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dce:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_displayCharacter+0xdc>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
    1e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0xca>
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_displayCharacter+0xbe>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	69 a9       	ldd	r22, Y+49	; 0x31
    1e38:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayCharacter+0x106>
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	66 e0       	ldi	r22, 0x06	; 6
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	8f a3       	std	Y+39, r24	; 0x27
    1e72:	98 a7       	std	Y+40, r25	; 0x28
    1e74:	a9 a7       	std	Y+41, r26	; 0x29
    1e76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8b a3       	std	Y+35, r24	; 0x23
    1e92:	9c a3       	std	Y+36, r25	; 0x24
    1e94:	ad a3       	std	Y+37, r26	; 0x25
    1e96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e98:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_displayCharacter+0x1ca>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
    1f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f06:	98 a1       	ldd	r25, Y+32	; 0x20
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x1b8>
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_displayCharacter+0x1ac>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6b a1       	ldd	r22, Y+35	; 0x23
    1f26:	7c a1       	ldd	r23, Y+36	; 0x24
    1f28:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0x1f4>
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f50:	0e 94 bb 0a 	call	0x1576	; 0x1576 <GPIO_writePort>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	89 8f       	std	Y+25, r24	; 0x19
    1f5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f60:	ab 8f       	std	Y+27, r26	; 0x1b
    1f62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	69 8d       	ldd	r22, Y+25	; 0x19
    1f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8d 8b       	std	Y+21, r24	; 0x15
    1f7e:	9e 8b       	std	Y+22, r25	; 0x16
    1f80:	af 8b       	std	Y+23, r26	; 0x17
    1f82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	98 8d       	ldd	r25, Y+24	; 0x18
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_displayCharacter+0x2b6>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9a 8b       	std	Y+18, r25	; 0x12
    1fee:	89 8b       	std	Y+17, r24	; 0x11
    1ff0:	89 89       	ldd	r24, Y+17	; 0x11
    1ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_displayCharacter+0x2a4>
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8b 89       	ldd	r24, Y+19	; 0x13
    2008:	9c 89       	ldd	r25, Y+20	; 0x14
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_displayCharacter+0x298>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6d 89       	ldd	r22, Y+21	; 0x15
    2012:	7e 89       	ldd	r23, Y+22	; 0x16
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	98 8d       	ldd	r25, Y+24	; 0x18
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	98 8b       	std	Y+16, r25	; 0x10
    202a:	8f 87       	std	Y+15, r24	; 0x0f
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	98 89       	ldd	r25, Y+16	; 0x10
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_displayCharacter+0x2e0>
    2034:	98 8b       	std	Y+16, r25	; 0x10
    2036:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	66 e0       	ldi	r22, 0x06	; 6
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_writePin>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	a9 87       	std	Y+9, r26	; 0x09
    2070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_displayCharacter+0x344>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_displayCharacter+0x3a4>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0x392>
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_displayCharacter+0x386>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x3ce>
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2126:	e9 96       	adiw	r28, 0x39	; 57
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <LCD_displayString>:

void LCD_displayString(const uint8 * data){
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <LCD_displayString+0x6>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_displayString+0x8>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2148:	1a 82       	std	Y+2, r1	; 0x02
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_displayString+0x34>
	while(data[i]!='\0'){
		LCD_displayCharacter(*(data+i));
    214e:	29 81       	ldd	r18, Y+1	; 0x01
    2150:	3a 81       	ldd	r19, Y+2	; 0x02
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	80 81       	ld	r24, Z
    215e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_displayCharacter>
		i++;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_displayString(const uint8 * data){
	int i=0;
	while(data[i]!='\0'){
    216c:	29 81       	ldd	r18, Y+1	; 0x01
    216e:	3a 81       	ldd	r19, Y+2	; 0x02
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	39 f7       	brne	.-50     	; 0x214e <LCD_displayString+0x16>
		LCD_displayCharacter(*(data+i));
		i++;
	}
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <LCD_moveCursor+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LCD_moveCursor+0x8>
    2196:	0f 92       	push	r0
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	8a 83       	std	Y+2, r24	; 0x02
    219e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	3d 83       	std	Y+5, r19	; 0x05
    21a8:	2c 83       	std	Y+4, r18	; 0x04
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	9d 81       	ldd	r25, Y+5	; 0x05
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	91 05       	cpc	r25, r1
    21b2:	c1 f0       	breq	.+48     	; 0x21e4 <LCD_moveCursor+0x56>
    21b4:	2c 81       	ldd	r18, Y+4	; 0x04
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <LCD_moveCursor+0x3a>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	61 f0       	breq	.+24     	; 0x21de <LCD_moveCursor+0x50>
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <LCD_moveCursor+0x6c>
    21c8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ca:	3d 81       	ldd	r19, Y+5	; 0x05
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	69 f0       	breq	.+26     	; 0x21ec <LCD_moveCursor+0x5e>
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	83 30       	cpi	r24, 0x03	; 3
    21d8:	91 05       	cpc	r25, r1
    21da:	61 f0       	breq	.+24     	; 0x21f4 <LCD_moveCursor+0x66>
    21dc:	0e c0       	rjmp	.+28     	; 0x21fa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	0b c0       	rjmp	.+22     	; 0x21fa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 5c       	subi	r24, 0xC0	; 192
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	80 5f       	subi	r24, 0xF0	; 240
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	80 5b       	subi	r24, 0xB0	; 176
    21f8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_SET_CURSOR_LOCATION(lcd_memory_address);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <LCD_displayStringRowColumn+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <LCD_displayStringRowColumn+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	6a 83       	std	Y+2, r22	; 0x02
    2222:	5c 83       	std	Y+4, r21	; 0x04
    2224:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	6a 81       	ldd	r22, Y+2	; 0x02
    222a:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	62 97       	sbiw	r28, 0x12	; 18
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	9a 8b       	std	Y+18, r25	; 0x12
    225a:	89 8b       	std	Y+17, r24	; 0x11
   unsigned char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	9a 89       	ldd	r25, Y+18	; 0x12
    2260:	9e 01       	movw	r18, r28
    2262:	2f 5f       	subi	r18, 0xFF	; 255
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	b9 01       	movw	r22, r18
    2268:	4a e0       	ldi	r20, 0x0A	; 10
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <itoa>
   LCD_displayString(buff); /* Display the string */
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
}
    2278:	62 96       	adiw	r28, 0x12	; 18
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LM35_getTemperature>:
#include "lm35_sensor.h"

#include "adc.h" /* To get digital value from ADC channel */

uint8 LM35_getTemperature(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	00 d0       	rcall	.+0      	; 0x2290 <LM35_getTemperature+0x6>
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value;

	uint16 adc_value;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	0e 94 45 07 	call	0xe8a	; 0xe8a <ADC_readChannel>
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value = (sensor maximum temperature * ADC reference volt)/(ADC maximum value * Sensor Maximum voltage */
	temp_value = (uint8)(((uint32)adc_value*LM35_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	cc 01       	movw	r24, r24
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	26 e9       	ldi	r18, 0x96	; 150
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__mulsi3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	2a e0       	ldi	r18, 0x0A	; 10
    22d0:	37 ed       	ldi	r19, 0xD7	; 215
    22d2:	43 e2       	ldi	r20, 0x23	; 35
    22d4:	50 e4       	ldi	r21, 0x40	; 64
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 ed       	ldi	r19, 0xD0	; 208
    22e6:	4f eb       	ldi	r20, 0xBF	; 191
    22e8:	54 e4       	ldi	r21, 0x44	; 68
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <main>:
		ASYNCHRONOUS, STOP_1_BIT, NO_PARITY, EIGHT_OR_NINE_BIT_MODE, RISING_TxD,
		9600 };

uint8 false_counter = 0;

int main(void) {
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	2e 97       	sbiw	r28, 0x0e	; 14
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
	UART_init(&UART_config);
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 31 15 	call	0x2a62	; 0x2a62 <UART_init>
	LCD_init();
    232a:	0e 94 91 0c 	call	0x1922	; 0x1922 <LCD_init>
	BUZZER_init();
    232e:	0e 94 7c 07 	call	0xef8	; 0xef8 <BUZZER_init>
	while (1) {
		newPassword(password, confirmPassword);
    2332:	89 ed       	ldi	r24, 0xD9	; 217
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	20 ee       	ldi	r18, 0xE0	; 224
    2338:	31 e0       	ldi	r19, 0x01	; 1
    233a:	b9 01       	movw	r22, r18
    233c:	0e 94 3a 12 	call	0x2474	; 0x2474 <newPassword>
		if (changePassword())
    2340:	0e 94 4b 14 	call	0x2896	; 0x2896 <changePassword>
    2344:	88 23       	and	r24, r24
    2346:	a9 f3       	breq	.-22     	; 0x2332 <main+0x24>
			break;
	}

	while (1) {
		if (false_counter >= 3) {
    2348:	80 91 d8 01 	lds	r24, 0x01D8
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	08 f4       	brcc	.+2      	; 0x2352 <main+0x44>
    2350:	83 c0       	rjmp	.+262    	; 0x2458 <main+0x14a>
			BUZZER_on();
    2352:	0e 94 8d 07 	call	0xf1a	; 0xf1a <BUZZER_on>
			LCD_CLEAR_SCREEN();
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
			LCD_moveCursor(0, 0);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
			LCD_displayString("INTRUDER!!!");
    2364:	80 e6       	ldi	r24, 0x60	; 96
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e6       	ldi	r25, 0x60	; 96
    2370:	aa e6       	ldi	r26, 0x6A	; 106
    2372:	b7 e4       	ldi	r27, 0x47	; 71
    2374:	8b 87       	std	Y+11, r24	; 0x0b
    2376:	9c 87       	std	Y+12, r25	; 0x0c
    2378:	ad 87       	std	Y+13, r26	; 0x0d
    237a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8f 83       	std	Y+7, r24	; 0x07
    2396:	98 87       	std	Y+8, r25	; 0x08
    2398:	a9 87       	std	Y+9, r26	; 0x09
    239a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <main+0xb0>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <main+0x12e>
	else if (__tmp > 65535)
    23be:	6f 81       	ldd	r22, Y+7	; 0x07
    23c0:	78 85       	ldd	r23, Y+8	; 0x08
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23da:	8d 85       	ldd	r24, Y+13	; 0x0d
    23dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <main+0x110>
    2400:	88 ec       	ldi	r24, 0xC8	; 200
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <main+0xfe>
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <main+0xf2>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <main+0x13a>
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(60000);
			BUZZER_off();
    2450:	0e 94 99 07 	call	0xf32	; 0xf32 <BUZZER_off>
			false_counter = 0;
    2454:	10 92 d8 01 	sts	0x01D8, r1
		}
		enterPassword(password);
    2458:	89 ed       	ldi	r24, 0xD9	; 217
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	0e 94 93 13 	call	0x2726	; 0x2726 <enterPassword>
		if (sendPassword()) {
    2460:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sendPassword>
    2464:	88 23       	and	r24, r24
    2466:	09 f4       	brne	.+2      	; 0x246a <main+0x15c>
    2468:	6f cf       	rjmp	.-290    	; 0x2348 <main+0x3a>
			loggedIn();
    246a:	0e 94 a1 14 	call	0x2942	; 0x2942 <loggedIn>
			false_counter = 0;
    246e:	10 92 d8 01 	sts	0x01D8, r1
    2472:	6a cf       	rjmp	.-300    	; 0x2348 <main+0x3a>

00002474 <newPassword>:
		}
	}

}
void newPassword(char *str, char *confirm) {
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	a1 97       	sbiw	r28, 0x21	; 33
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	9f 8f       	std	Y+31, r25	; 0x1f
    248e:	8e 8f       	std	Y+30, r24	; 0x1e
    2490:	79 a3       	std	Y+33, r23	; 0x21
    2492:	68 a3       	std	Y+32, r22	; 0x20
	LCD_CLEAR_SCREEN();
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString("Enter a Password");
    24a2:	8c e6       	ldi	r24, 0x6C	; 108
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	char i = 0;
    24b2:	1d 8e       	std	Y+29, r1	; 0x1d
    24b4:	84 c0       	rjmp	.+264    	; 0x25be <newPassword+0x14a>
	while (i < PASSWORD_SIZE) {
		str[i] = KEYPAD_getPressedKey();
    24b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24c0:	8c 01       	movw	r16, r24
    24c2:	02 0f       	add	r16, r18
    24c4:	13 1f       	adc	r17, r19
    24c6:	0e 94 99 0b 	call	0x1732	; 0x1732 <KEYPAD_getPressedKey>
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    24ce:	8a e2       	ldi	r24, 0x2A	; 42
    24d0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_displayCharacter>
		i++;
    24d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	8d 8f       	std	Y+29, r24	; 0x1d
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 ef       	ldi	r26, 0xF0	; 240
    24e0:	b1 e4       	ldi	r27, 0x41	; 65
    24e2:	89 8f       	std	Y+25, r24	; 0x19
    24e4:	9a 8f       	std	Y+26, r25	; 0x1a
    24e6:	ab 8f       	std	Y+27, r26	; 0x1b
    24e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8d 8b       	std	Y+21, r24	; 0x15
    2504:	9e 8b       	std	Y+22, r25	; 0x16
    2506:	af 8b       	std	Y+23, r26	; 0x17
    2508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <newPassword+0xb8>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <newPassword+0x136>
	else if (__tmp > 65535)
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <newPassword+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	69 8d       	ldd	r22, Y+25	; 0x19
    2546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
    256c:	0f c0       	rjmp	.+30     	; 0x258c <newPassword+0x118>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9a 8b       	std	Y+18, r25	; 0x12
    2574:	89 8b       	std	Y+17, r24	; 0x11
    2576:	89 89       	ldd	r24, Y+17	; 0x11
    2578:	9a 89       	ldd	r25, Y+18	; 0x12
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <newPassword+0x106>
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <newPassword+0xfa>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <newPassword+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	98 8b       	std	Y+16, r25	; 0x10
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
    25b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b4:	98 89       	ldd	r25, Y+16	; 0x10
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <newPassword+0x142>
    25ba:	98 8b       	std	Y+16, r25	; 0x10
    25bc:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_CLEAR_SCREEN();
	LCD_moveCursor(0, 0);
	LCD_displayString("Enter a Password");
	LCD_moveCursor(1, 0);
	char i = 0;
	while (i < PASSWORD_SIZE) {
    25be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c0:	86 30       	cpi	r24, 0x06	; 6
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <newPassword+0x152>
    25c4:	78 cf       	rjmp	.-272    	; 0x24b6 <newPassword+0x42>
		str[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		i++;
		_delay_ms(30);
	}
	str[PASSWORD_SIZE] = '#';
    25c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25ca:	fc 01       	movw	r30, r24
    25cc:	36 96       	adiw	r30, 0x06	; 6
    25ce:	83 e2       	ldi	r24, 0x23	; 35
    25d0:	80 83       	st	Z, r24

	LCD_CLEAR_SCREEN();
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>

	LCD_moveCursor(0, 0);
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString("Re-Enter");
    25e0:	8d e7       	ldi	r24, 0x7D	; 125
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	i = 0;
    25f0:	1d 8e       	std	Y+29, r1	; 0x1d
    25f2:	84 c0       	rjmp	.+264    	; 0x26fc <newPassword+0x288>
	while (i < PASSWORD_SIZE) {
		confirm[i] = KEYPAD_getPressedKey();
    25f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	88 a1       	ldd	r24, Y+32	; 0x20
    25fc:	99 a1       	ldd	r25, Y+33	; 0x21
    25fe:	8c 01       	movw	r16, r24
    2600:	02 0f       	add	r16, r18
    2602:	13 1f       	adc	r17, r19
    2604:	0e 94 99 0b 	call	0x1732	; 0x1732 <KEYPAD_getPressedKey>
    2608:	f8 01       	movw	r30, r16
    260a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    260c:	8a e2       	ldi	r24, 0x2A	; 42
    260e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_displayCharacter>
		i++;
    2612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	8d 8f       	std	Y+29, r24	; 0x1d
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a0 ef       	ldi	r26, 0xF0	; 240
    261e:	b1 e4       	ldi	r27, 0x41	; 65
    2620:	8b 87       	std	Y+11, r24	; 0x0b
    2622:	9c 87       	std	Y+12, r25	; 0x0c
    2624:	ad 87       	std	Y+13, r26	; 0x0d
    2626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2628:	6b 85       	ldd	r22, Y+11	; 0x0b
    262a:	7c 85       	ldd	r23, Y+12	; 0x0c
    262c:	8d 85       	ldd	r24, Y+13	; 0x0d
    262e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a ef       	ldi	r20, 0xFA	; 250
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8f 83       	std	Y+7, r24	; 0x07
    2642:	98 87       	std	Y+8, r25	; 0x08
    2644:	a9 87       	std	Y+9, r26	; 0x09
    2646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	2c f4       	brge	.+10     	; 0x266a <newPassword+0x1f6>
		__ticks = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	3f c0       	rjmp	.+126    	; 0x26e8 <newPassword+0x274>
	else if (__tmp > 65535)
    266a:	6f 81       	ldd	r22, Y+7	; 0x07
    266c:	78 85       	ldd	r23, Y+8	; 0x08
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	3f ef       	ldi	r19, 0xFF	; 255
    2676:	4f e7       	ldi	r20, 0x7F	; 127
    2678:	57 e4       	ldi	r21, 0x47	; 71
    267a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267e:	18 16       	cp	r1, r24
    2680:	4c f5       	brge	.+82     	; 0x26d4 <newPassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2682:	6b 85       	ldd	r22, Y+11	; 0x0b
    2684:	7c 85       	ldd	r23, Y+12	; 0x0c
    2686:	8d 85       	ldd	r24, Y+13	; 0x0d
    2688:	9e 85       	ldd	r25, Y+14	; 0x0e
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e2       	ldi	r20, 0x20	; 32
    2690:	51 e4       	ldi	r21, 0x41	; 65
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <newPassword+0x256>
    26ac:	88 ec       	ldi	r24, 0xC8	; 200
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9c 83       	std	Y+4, r25	; 0x04
    26b2:	8b 83       	std	Y+3, r24	; 0x03
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <newPassword+0x244>
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	69 f7       	brne	.-38     	; 0x26ac <newPassword+0x238>
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <newPassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	6f 81       	ldd	r22, Y+7	; 0x07
    26d6:	78 85       	ldd	r23, Y+8	; 0x08
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	9a 85       	ldd	r25, Y+10	; 0x0a
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <newPassword+0x280>
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(0, 0);
	LCD_displayString("Re-Enter");
	LCD_moveCursor(1, 0);
	i = 0;
	while (i < PASSWORD_SIZE) {
    26fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fe:	86 30       	cpi	r24, 0x06	; 6
    2700:	08 f4       	brcc	.+2      	; 0x2704 <newPassword+0x290>
    2702:	78 cf       	rjmp	.-272    	; 0x25f4 <newPassword+0x180>
		confirm[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		i++;
		_delay_ms(30);
	}
	confirm[PASSWORD_SIZE] = '#';
    2704:	88 a1       	ldd	r24, Y+32	; 0x20
    2706:	99 a1       	ldd	r25, Y+33	; 0x21
    2708:	fc 01       	movw	r30, r24
    270a:	36 96       	adiw	r30, 0x06	; 6
    270c:	83 e2       	ldi	r24, 0x23	; 35
    270e:	80 83       	st	Z, r24
}
    2710:	a1 96       	adiw	r28, 0x21	; 33
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	08 95       	ret

00002726 <enterPassword>:
void enterPassword(char *str) {
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	61 97       	sbiw	r28, 0x11	; 17
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	99 8b       	std	Y+17, r25	; 0x11
    2740:	88 8b       	std	Y+16, r24	; 0x10
	LCD_CLEAR_SCREEN();
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString("Enter Password");
    2750:	86 e8       	ldi	r24, 0x86	; 134
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	char i = 0;
    2760:	1f 86       	std	Y+15, r1	; 0x0f
    2762:	84 c0       	rjmp	.+264    	; 0x286c <enterPassword+0x146>
	while (i < PASSWORD_SIZE) {
		str[i] = KEYPAD_getPressedKey();
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	88 89       	ldd	r24, Y+16	; 0x10
    276c:	99 89       	ldd	r25, Y+17	; 0x11
    276e:	8c 01       	movw	r16, r24
    2770:	02 0f       	add	r16, r18
    2772:	13 1f       	adc	r17, r19
    2774:	0e 94 99 0b 	call	0x1732	; 0x1732 <KEYPAD_getPressedKey>
    2778:	f8 01       	movw	r30, r16
    277a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    277c:	8a e2       	ldi	r24, 0x2A	; 42
    277e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_displayCharacter>
		i++;
    2782:	8f 85       	ldd	r24, Y+15	; 0x0f
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	8f 87       	std	Y+15, r24	; 0x0f
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 ef       	ldi	r26, 0xF0	; 240
    278e:	b1 e4       	ldi	r27, 0x41	; 65
    2790:	8b 87       	std	Y+11, r24	; 0x0b
    2792:	9c 87       	std	Y+12, r25	; 0x0c
    2794:	ad 87       	std	Y+13, r26	; 0x0d
    2796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	6b 85       	ldd	r22, Y+11	; 0x0b
    279a:	7c 85       	ldd	r23, Y+12	; 0x0c
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8f 83       	std	Y+7, r24	; 0x07
    27b2:	98 87       	std	Y+8, r25	; 0x08
    27b4:	a9 87       	std	Y+9, r26	; 0x09
    27b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <enterPassword+0xb4>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <enterPassword+0x132>
	else if (__tmp > 65535)
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <enterPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
    281a:	0f c0       	rjmp	.+30     	; 0x283a <enterPassword+0x114>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9c 83       	std	Y+4, r25	; 0x04
    2822:	8b 83       	std	Y+3, r24	; 0x03
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <enterPassword+0x102>
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <enterPassword+0xf6>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <enterPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <enterPassword+0x13e>
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	89 83       	std	Y+1, r24	; 0x01
	LCD_CLEAR_SCREEN();
	LCD_moveCursor(0, 0);
	LCD_displayString("Enter Password");
	LCD_moveCursor(1, 0);
	char i = 0;
	while (i < PASSWORD_SIZE) {
    286c:	8f 85       	ldd	r24, Y+15	; 0x0f
    286e:	86 30       	cpi	r24, 0x06	; 6
    2870:	08 f4       	brcc	.+2      	; 0x2874 <enterPassword+0x14e>
    2872:	78 cf       	rjmp	.-272    	; 0x2764 <enterPassword+0x3e>
		str[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		i++;
		_delay_ms(30);
	}
	str[PASSWORD_SIZE] = '#';
    2874:	88 89       	ldd	r24, Y+16	; 0x10
    2876:	99 89       	ldd	r25, Y+17	; 0x11
    2878:	fc 01       	movw	r30, r24
    287a:	36 96       	adiw	r30, 0x06	; 6
    287c:	83 e2       	ldi	r24, 0x23	; 35
    287e:	80 83       	st	Z, r24
}
    2880:	61 96       	adiw	r28, 0x11	; 17
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <changePassword>:
uint8 changePassword(void) {
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <changePassword+0x6>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != MC_READY) {
    28a2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    28a6:	80 31       	cpi	r24, 0x10	; 16
    28a8:	e1 f7       	brne	.-8      	; 0x28a2 <changePassword+0xc>
	}
	UART_sendString(password);
    28aa:	89 ed       	ldi	r24, 0xD9	; 217
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <UART_sendString>
	while (UART_recieveByte() != MC_READY) {
    28b2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    28b6:	80 31       	cpi	r24, 0x10	; 16
    28b8:	e1 f7       	brne	.-8      	; 0x28b2 <changePassword+0x1c>
	}
	UART_sendString(confirmPassword);
    28ba:	80 ee       	ldi	r24, 0xE0	; 224
    28bc:	91 e0       	ldi	r25, 0x01	; 1
    28be:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <UART_sendString>
	UART_sendByte(MC_READY);
    28c2:	80 e1       	ldi	r24, 0x10	; 16
    28c4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
	uint8 val = UART_recieveByte();
    28c8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    28cc:	89 83       	std	Y+1, r24	; 0x01
	if (val == DIFFERENT_PASSWORDS) {
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	11 f4       	brne	.+4      	; 0x28d8 <changePassword+0x42>
		return 0;
    28d4:	1a 82       	std	Y+2, r1	; 0x02
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <changePassword+0x50>
	} else if (val == CHANGE_SUCCESS) {
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <changePassword+0x4e>
		return 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	8a 83       	std	Y+2, r24	; 0x02
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <changePassword+0x50>
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <changePassword+0x54>
	}

}
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	8b 83       	std	Y+3, r24	; 0x03
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <sendPassword>:

uint8 sendPassword(void) {
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <sendPassword+0x6>
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != MC_READY) {
    2902:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2906:	80 31       	cpi	r24, 0x10	; 16
    2908:	e1 f7       	brne	.-8      	; 0x2902 <sendPassword+0xa>
	}
	UART_sendString(password);
    290a:	89 ed       	ldi	r24, 0xD9	; 217
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <UART_sendString>
	UART_sendByte(MC_READY);
    2912:	80 e1       	ldi	r24, 0x10	; 16
    2914:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
	char val = UART_recieveByte();
    2918:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    291c:	89 83       	std	Y+1, r24	; 0x01
	if (val == RIGHT_PASSWORD) {
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	84 30       	cpi	r24, 0x04	; 4
    2922:	19 f4       	brne	.+6      	; 0x292a <sendPassword+0x32>
		return 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	06 c0       	rjmp	.+12     	; 0x2936 <sendPassword+0x3e>
	} else {
		false_counter++;
    292a:	80 91 d8 01 	lds	r24, 0x01D8
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 d8 01 	sts	0x01D8, r24
		return 0;
    2934:	1a 82       	std	Y+2, r1	; 0x02
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <loggedIn>:

void loggedIn(void) {
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	0f 92       	push	r0
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62

	while (UART_recieveByte() != MC_READY) {
    294c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2950:	80 31       	cpi	r24, 0x10	; 16
    2952:	e1 f7       	brne	.-8      	; 0x294c <loggedIn+0xa>
	}
	uint8 var;
	LCD_CLEAR_SCREEN();
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_moveCursor(0, 0);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString("+: Open Door");
    2962:	85 e9       	ldi	r24, 0x95	; 149
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString("-: Change Password");
    2972:	82 ea       	ldi	r24, 0xA2	; 162
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	while (1) {
		var = KEYPAD_getPressedKey();
    297a:	0e 94 99 0b 	call	0x1732	; 0x1732 <KEYPAD_getPressedKey>
    297e:	89 83       	std	Y+1, r24	; 0x01
		if (var == '+' || var == '-') {
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	8b 32       	cpi	r24, 0x2B	; 43
    2984:	19 f0       	breq	.+6      	; 0x298c <loggedIn+0x4a>
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	8d 32       	cpi	r24, 0x2D	; 45
    298a:	b9 f7       	brne	.-18     	; 0x297a <loggedIn+0x38>
			UART_sendByte(var);
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
			if (var == '+') {
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	8b 32       	cpi	r24, 0x2B	; 43
    2996:	81 f4       	brne	.+32     	; 0x29b8 <loggedIn+0x76>
				LCD_CLEAR_SCREEN();
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
				LCD_moveCursor(0, 0);
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
				LCD_displayString("Opening...");
    29a6:	85 eb       	ldi	r24, 0xB5	; 181
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
				while (UART_recieveByte() != MC_READY) {
    29ae:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    29b2:	80 31       	cpi	r24, 0x10	; 16
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <loggedIn+0x6c>
    29b6:	0e c0       	rjmp	.+28     	; 0x29d4 <loggedIn+0x92>
				}
			} else if (var == '-') {
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	8d 32       	cpi	r24, 0x2D	; 45
    29bc:	59 f4       	brne	.+22     	; 0x29d4 <loggedIn+0x92>
				while (1) {
					newPassword(password, confirmPassword);
    29be:	89 ed       	ldi	r24, 0xD9	; 217
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	20 ee       	ldi	r18, 0xE0	; 224
    29c4:	31 e0       	ldi	r19, 0x01	; 1
    29c6:	b9 01       	movw	r22, r18
    29c8:	0e 94 3a 12 	call	0x2474	; 0x2474 <newPassword>
					if (changePassword())
    29cc:	0e 94 4b 14 	call	0x2896	; 0x2896 <changePassword>
    29d0:	88 23       	and	r24, r24
    29d2:	a9 f3       	breq	.-22     	; 0x29be <loggedIn+0x7c>
						break;
				}
			}
			break;
		}
	}
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <PWM_Timer0_Start>:
#include <avr/io.h> /* to access timer0 registers */
#include "gpio.h" /* to set PB3/OC0 as an output pin */



void PWM_Timer0_Start(uint8 duty_cycle){
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	89 83       	std	Y+1, r24	; 0x01

	/* Set counter to 0 */
	TCNT0=0;
    29ec:	e2 e5       	ldi	r30, 0x52	; 82
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	10 82       	st	Z, r1

	/* set PB3/OC0 as an output pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	63 e0       	ldi	r22, 0x03	; 3
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_setupPinDirection>

	/* OCR0 value = (percentage of duty cycle/100)* (maximum register value = 255) */
	OCR0=(uint8)(((float)duty_cycle/100)*255);
    29fc:	0c e5       	ldi	r16, 0x5C	; 92
    29fe:	10 e0       	ldi	r17, 0x00	; 0
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	48 ec       	ldi	r20, 0xC8	; 200
    2a20:	52 e4       	ldi	r21, 0x42	; 66
    2a22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	53 e4       	ldi	r21, 0x43	; 67
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	80 83       	st	Z, r24
	/* Timer/Counter Control Register:
	 * 1- Set mode as Fast PWM mode -> WGM00 and WGM01 = 1
	 * 2- Non-Inverting mode -> COM01 = 1
	 * 3- F_CPU/8 Prescalar -> PRESCALAR8 defined as 2 -> CS00 and CS02 =0, CS01=1
	 */
	TCCR0=FAST_PWM_MODE|NON_INVERTING_MODE|PRESCALAR_8;
    2a4e:	e3 e5       	ldi	r30, 0x53	; 83
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	8a e6       	ldi	r24, 0x6A	; 106
    2a54:	80 83       	st	Z, r24

}
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_configType* config)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <UART_init+0x6>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <UART_init+0x8>
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a72:	1a 82       	std	Y+2, r1	; 0x02
    2a74:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (config->doubleRate)|(config->multiprocessorMode);
    2a76:	ab e2       	ldi	r26, 0x2B	; 43
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7e:	90 81       	ld	r25, Z
    2a80:	eb 81       	ldd	r30, Y+3	; 0x03
    2a82:	fc 81       	ldd	r31, Y+4	; 0x04
    2a84:	81 81       	ldd	r24, Z+1	; 0x01
    2a86:	89 2b       	or	r24, r25
    2a88:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (config->receiveEnable)|(config->sendEnable)|(config->receiveIntEnable)|(config->sendIntEnable)|(config->emptyIntEnable)|(config->nineBitMode);
    2a8a:	aa e2       	ldi	r26, 0x2A	; 42
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a90:	fc 81       	ldd	r31, Y+4	; 0x04
    2a92:	95 81       	ldd	r25, Z+5	; 0x05
    2a94:	eb 81       	ldd	r30, Y+3	; 0x03
    2a96:	fc 81       	ldd	r31, Y+4	; 0x04
    2a98:	86 81       	ldd	r24, Z+6	; 0x06
    2a9a:	98 2b       	or	r25, r24
    2a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	98 2b       	or	r25, r24
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	83 81       	ldd	r24, Z+3	; 0x03
    2aaa:	98 2b       	or	r25, r24
    2aac:	eb 81       	ldd	r30, Y+3	; 0x03
    2aae:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab0:	84 81       	ldd	r24, Z+4	; 0x04
    2ab2:	98 2b       	or	r25, r24
    2ab4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab8:	87 81       	ldd	r24, Z+7	; 0x07
    2aba:	89 2b       	or	r24, r25
    2abc:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (config->bitNumSelect)|(config->modeSelect)|(config->parityMode)|(1<<URSEL)|(config->stopBits)|(config->clockPolarity);
    2abe:	a0 e4       	ldi	r26, 0x40	; 64
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac6:	93 85       	ldd	r25, Z+11	; 0x0b
    2ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aca:	fc 81       	ldd	r31, Y+4	; 0x04
    2acc:	80 85       	ldd	r24, Z+8	; 0x08
    2ace:	98 2b       	or	r25, r24
    2ad0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad6:	98 2b       	or	r25, r24
    2ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ada:	fc 81       	ldd	r31, Y+4	; 0x04
    2adc:	81 85       	ldd	r24, Z+9	; 0x09
    2ade:	98 2b       	or	r25, r24
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	84 85       	ldd	r24, Z+12	; 0x0c
    2ae6:	89 2b       	or	r24, r25
    2ae8:	80 68       	ori	r24, 0x80	; 128
    2aea:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baudRate * 8UL))) - 1);
    2aec:	eb 81       	ldd	r30, Y+3	; 0x03
    2aee:	fc 81       	ldd	r31, Y+4	; 0x04
    2af0:	85 85       	ldd	r24, Z+13	; 0x0d
    2af2:	96 85       	ldd	r25, Z+14	; 0x0e
    2af4:	cc 01       	movw	r24, r24
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	aa 1f       	adc	r26, r26
    2b00:	bb 1f       	adc	r27, r27
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	bb 1f       	adc	r27, r27
    2b12:	9c 01       	movw	r18, r24
    2b14:	ad 01       	movw	r20, r26
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	92 e1       	ldi	r25, 0x12	; 18
    2b1a:	aa e7       	ldi	r26, 0x7A	; 122
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__udivmodsi4>
    2b26:	da 01       	movw	r26, r20
    2b28:	c9 01       	movw	r24, r18
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b30:	e0 e4       	ldi	r30, 0x40	; 64
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	89 2f       	mov	r24, r25
    2b3a:	99 27       	eor	r25, r25
    2b3c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b3e:	e9 e2       	ldi	r30, 0x29	; 41
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	80 83       	st	Z, r24
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b60:	eb e2       	ldi	r30, 0x2B	; 43
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	80 72       	andi	r24, 0x20	; 32
    2b6c:	90 70       	andi	r25, 0x00	; 0
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	b9 f3       	breq	.-18     	; 0x2b60 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b72:	ec e2       	ldi	r30, 0x2C	; 44
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b8a:	eb e2       	ldi	r30, 0x2B	; 43
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 23       	and	r24, r24
    2b92:	dc f7       	brge	.-10     	; 0x2b8a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b94:	ec e2       	ldi	r30, 0x2C	; 44
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <UART_sendString+0x6>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	0e c0       	rjmp	.+28     	; 0x2bd0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
		i++;
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	88 23       	and	r24, r24
    2be4:	39 f7       	brne	.-50     	; 0x2bb4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <UART_receiveString+0xa>
    2bfc:	0f 92       	push	r0
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	9b 83       	std	Y+3, r25	; 0x03
    2c04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c06:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	8c 01       	movw	r16, r24
    2c14:	02 0f       	add	r16, r18
    2c16:	13 1f       	adc	r17, r19
    2c18:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	80 83       	st	Z, r24
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	8c 01       	movw	r16, r24
    2c34:	02 0f       	add	r16, r18
    2c36:	13 1f       	adc	r17, r19
    2c38:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e2 0f       	add	r30, r18
    2c4e:	f3 1f       	adc	r31, r19
    2c50:	80 81       	ld	r24, Z
    2c52:	83 32       	cpi	r24, 0x23	; 35
    2c54:	31 f7       	brne	.-52     	; 0x2c22 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	10 82       	st	Z, r1
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <__mulsi3>:
    2c78:	62 9f       	mul	r22, r18
    2c7a:	d0 01       	movw	r26, r0
    2c7c:	73 9f       	mul	r23, r19
    2c7e:	f0 01       	movw	r30, r0
    2c80:	82 9f       	mul	r24, r18
    2c82:	e0 0d       	add	r30, r0
    2c84:	f1 1d       	adc	r31, r1
    2c86:	64 9f       	mul	r22, r20
    2c88:	e0 0d       	add	r30, r0
    2c8a:	f1 1d       	adc	r31, r1
    2c8c:	92 9f       	mul	r25, r18
    2c8e:	f0 0d       	add	r31, r0
    2c90:	83 9f       	mul	r24, r19
    2c92:	f0 0d       	add	r31, r0
    2c94:	74 9f       	mul	r23, r20
    2c96:	f0 0d       	add	r31, r0
    2c98:	65 9f       	mul	r22, r21
    2c9a:	f0 0d       	add	r31, r0
    2c9c:	99 27       	eor	r25, r25
    2c9e:	72 9f       	mul	r23, r18
    2ca0:	b0 0d       	add	r27, r0
    2ca2:	e1 1d       	adc	r30, r1
    2ca4:	f9 1f       	adc	r31, r25
    2ca6:	63 9f       	mul	r22, r19
    2ca8:	b0 0d       	add	r27, r0
    2caa:	e1 1d       	adc	r30, r1
    2cac:	f9 1f       	adc	r31, r25
    2cae:	bd 01       	movw	r22, r26
    2cb0:	cf 01       	movw	r24, r30
    2cb2:	11 24       	eor	r1, r1
    2cb4:	08 95       	ret

00002cb6 <__udivmodsi4>:
    2cb6:	a1 e2       	ldi	r26, 0x21	; 33
    2cb8:	1a 2e       	mov	r1, r26
    2cba:	aa 1b       	sub	r26, r26
    2cbc:	bb 1b       	sub	r27, r27
    2cbe:	fd 01       	movw	r30, r26
    2cc0:	0d c0       	rjmp	.+26     	; 0x2cdc <__udivmodsi4_ep>

00002cc2 <__udivmodsi4_loop>:
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	ee 1f       	adc	r30, r30
    2cc8:	ff 1f       	adc	r31, r31
    2cca:	a2 17       	cp	r26, r18
    2ccc:	b3 07       	cpc	r27, r19
    2cce:	e4 07       	cpc	r30, r20
    2cd0:	f5 07       	cpc	r31, r21
    2cd2:	20 f0       	brcs	.+8      	; 0x2cdc <__udivmodsi4_ep>
    2cd4:	a2 1b       	sub	r26, r18
    2cd6:	b3 0b       	sbc	r27, r19
    2cd8:	e4 0b       	sbc	r30, r20
    2cda:	f5 0b       	sbc	r31, r21

00002cdc <__udivmodsi4_ep>:
    2cdc:	66 1f       	adc	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	88 1f       	adc	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	1a 94       	dec	r1
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <__udivmodsi4_loop>
    2ce8:	60 95       	com	r22
    2cea:	70 95       	com	r23
    2cec:	80 95       	com	r24
    2cee:	90 95       	com	r25
    2cf0:	9b 01       	movw	r18, r22
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	bd 01       	movw	r22, r26
    2cf6:	cf 01       	movw	r24, r30
    2cf8:	08 95       	ret

00002cfa <__prologue_saves__>:
    2cfa:	2f 92       	push	r2
    2cfc:	3f 92       	push	r3
    2cfe:	4f 92       	push	r4
    2d00:	5f 92       	push	r5
    2d02:	6f 92       	push	r6
    2d04:	7f 92       	push	r7
    2d06:	8f 92       	push	r8
    2d08:	9f 92       	push	r9
    2d0a:	af 92       	push	r10
    2d0c:	bf 92       	push	r11
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	ca 1b       	sub	r28, r26
    2d24:	db 0b       	sbc	r29, r27
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	09 94       	ijmp

00002d32 <__epilogue_restores__>:
    2d32:	2a 88       	ldd	r2, Y+18	; 0x12
    2d34:	39 88       	ldd	r3, Y+17	; 0x11
    2d36:	48 88       	ldd	r4, Y+16	; 0x10
    2d38:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d40:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d42:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d44:	b9 84       	ldd	r11, Y+9	; 0x09
    2d46:	c8 84       	ldd	r12, Y+8	; 0x08
    2d48:	df 80       	ldd	r13, Y+7	; 0x07
    2d4a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d4c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d4e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d50:	1b 81       	ldd	r17, Y+3	; 0x03
    2d52:	aa 81       	ldd	r26, Y+2	; 0x02
    2d54:	b9 81       	ldd	r27, Y+1	; 0x01
    2d56:	ce 0f       	add	r28, r30
    2d58:	d1 1d       	adc	r29, r1
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	ed 01       	movw	r28, r26
    2d66:	08 95       	ret

00002d68 <itoa>:
    2d68:	fb 01       	movw	r30, r22
    2d6a:	9f 01       	movw	r18, r30
    2d6c:	e8 94       	clt
    2d6e:	42 30       	cpi	r20, 0x02	; 2
    2d70:	c4 f0       	brlt	.+48     	; 0x2da2 <itoa+0x3a>
    2d72:	45 32       	cpi	r20, 0x25	; 37
    2d74:	b4 f4       	brge	.+44     	; 0x2da2 <itoa+0x3a>
    2d76:	4a 30       	cpi	r20, 0x0A	; 10
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <itoa+0x1c>
    2d7a:	97 fb       	bst	r25, 7
    2d7c:	1e f4       	brtc	.+6      	; 0x2d84 <itoa+0x1c>
    2d7e:	90 95       	com	r25
    2d80:	81 95       	neg	r24
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	64 2f       	mov	r22, r20
    2d86:	77 27       	eor	r23, r23
    2d88:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__udivmodhi4>
    2d8c:	80 5d       	subi	r24, 0xD0	; 208
    2d8e:	8a 33       	cpi	r24, 0x3A	; 58
    2d90:	0c f0       	brlt	.+2      	; 0x2d94 <itoa+0x2c>
    2d92:	89 5d       	subi	r24, 0xD9	; 217
    2d94:	81 93       	st	Z+, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	a1 f7       	brne	.-24     	; 0x2d84 <itoa+0x1c>
    2d9c:	16 f4       	brtc	.+4      	; 0x2da2 <itoa+0x3a>
    2d9e:	5d e2       	ldi	r21, 0x2D	; 45
    2da0:	51 93       	st	Z+, r21
    2da2:	10 82       	st	Z, r1
    2da4:	c9 01       	movw	r24, r18
    2da6:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <strrev>

00002daa <strrev>:
    2daa:	dc 01       	movw	r26, r24
    2dac:	fc 01       	movw	r30, r24
    2dae:	67 2f       	mov	r22, r23
    2db0:	71 91       	ld	r23, Z+
    2db2:	77 23       	and	r23, r23
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <strrev+0x4>
    2db6:	32 97       	sbiw	r30, 0x02	; 2
    2db8:	04 c0       	rjmp	.+8      	; 0x2dc2 <strrev+0x18>
    2dba:	7c 91       	ld	r23, X
    2dbc:	6d 93       	st	X+, r22
    2dbe:	70 83       	st	Z, r23
    2dc0:	62 91       	ld	r22, -Z
    2dc2:	ae 17       	cp	r26, r30
    2dc4:	bf 07       	cpc	r27, r31
    2dc6:	c8 f3       	brcs	.-14     	; 0x2dba <strrev+0x10>
    2dc8:	08 95       	ret

00002dca <__udivmodhi4>:
    2dca:	aa 1b       	sub	r26, r26
    2dcc:	bb 1b       	sub	r27, r27
    2dce:	51 e1       	ldi	r21, 0x11	; 17
    2dd0:	07 c0       	rjmp	.+14     	; 0x2de0 <__udivmodhi4_ep>

00002dd2 <__udivmodhi4_loop>:
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	a6 17       	cp	r26, r22
    2dd8:	b7 07       	cpc	r27, r23
    2dda:	10 f0       	brcs	.+4      	; 0x2de0 <__udivmodhi4_ep>
    2ddc:	a6 1b       	sub	r26, r22
    2dde:	b7 0b       	sbc	r27, r23

00002de0 <__udivmodhi4_ep>:
    2de0:	88 1f       	adc	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	5a 95       	dec	r21
    2de6:	a9 f7       	brne	.-22     	; 0x2dd2 <__udivmodhi4_loop>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	08 95       	ret

00002df2 <_exit>:
    2df2:	f8 94       	cli

00002df4 <__stop_program>:
    2df4:	ff cf       	rjmp	.-2      	; 0x2df4 <__stop_program>
