
Final_Project_Front.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000273e  000027b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002700  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001814  00000000  00000000  00004fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000067e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 56 11 	call	0x22ac	; 0x22ac <main>
      7a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>


void ADC_init(ADC_ConfigType * config){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	/* Pass each struct value to its corresponding register */
	ADMUX= (config->ref_volt)|(config->data_adjust);
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e9 81       	ldd	r30, Y+1	; 0x01
     e32:	fa 81       	ldd	r31, Y+2	; 0x02
     e34:	90 81       	ld	r25, Z
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	fa 81       	ldd	r31, Y+2	; 0x02
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	89 2b       	or	r24, r25
     e3e:	8c 93       	st	X, r24
	ADCSRA=(config->adc_enable|config->autoTrigger_enable)|(config->interrupt_enable)|(config->prescaler);
     e40:	a6 e2       	ldi	r26, 0x26	; 38
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	92 81       	ldd	r25, Z+2	; 0x02
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	85 81       	ldd	r24, Z+5	; 0x05
     e50:	98 2b       	or	r25, r24
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	98 2b       	or	r25, r24
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	83 81       	ldd	r24, Z+3	; 0x03
     e60:	89 2b       	or	r24, r25
     e62:	8c 93       	st	X, r24
	SFIOR=(config->autoTrigger_source);
     e64:	a0 e5       	ldi	r26, 0x50	; 80
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	86 81       	ldd	r24, Z+6	; 0x06
     e6e:	8c 93       	st	X, r24
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num){
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
	/* Disregard any bit after bit 3 */
	ch_num&=0x0E;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	8e 70       	andi	r24, 0x0E	; 14
     e8a:	89 83       	std	Y+1, r24	; 0x01
	/* Clear bits 0->3 */
	ADMUX&=0xE0;
     e8c:	a7 e2       	ldi	r26, 0x27	; 39
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e7 e2       	ldi	r30, 0x27	; 39
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 7e       	andi	r24, 0xE0	; 224
     e98:	8c 93       	st	X, r24
	/* Insert channel number */
	ADMUX|=ch_num;
     e9a:	a7 e2       	ldi	r26, 0x27	; 39
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e2       	ldi	r30, 0x27	; 39
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	90 81       	ld	r25, Z
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	89 2b       	or	r24, r25
     ea8:	8c 93       	st	X, r24
	/* Start conversion */
	SET_BIT(ADCSRA,ADSC);
     eaa:	a6 e2       	ldi	r26, 0x26	; 38
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 64       	ori	r24, 0x40	; 64
     eb6:	8c 93       	st	X, r24
	/* Polling interrupt flag */
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     eb8:	e6 e2       	ldi	r30, 0x26	; 38
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	80 71       	andi	r24, 0x10	; 16
     ec4:	90 70       	andi	r25, 0x00	; 0
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	b9 f3       	breq	.-18     	; 0xeb8 <ADC_readChannel+0x3e>
	/* Clear interrupt flag */
	SET_BIT(ADCSRA,ADIF);
     eca:	a6 e2       	ldi	r26, 0x26	; 38
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 61       	ori	r24, 0x10	; 16
     ed6:	8c 93       	st	X, r24
	/* return data register */
	return ADC;
     ed8:	e4 e2       	ldi	r30, 0x24	; 36
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
}
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <DcMotor_Init>:
 *******************************************************************************/
#include "dc_motor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void){
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	/* Set defined motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, PIN_OUTPUT);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, PIN_OUTPUT);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>

	/* Initially stop the motor */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <DcMotor_Rotate+0x6>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <DcMotor_Rotate+0x8>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	6a 83       	std	Y+2, r22	; 0x02

	/* Start the PWM module with duty cycle equal to the given speed */
	PWM_Timer0_Start(speed);
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	0e 94 92 11 	call	0x2324	; 0x2324 <PWM_Timer0_Start>

	switch (state) {
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	3c 83       	std	Y+4, r19	; 0x04
     f3c:	2b 83       	std	Y+3, r18	; 0x03
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	01 f1       	breq	.+64     	; 0xf88 <DcMotor_Rotate+0x6a>
     f48:	2b 81       	ldd	r18, Y+3	; 0x03
     f4a:	3c 81       	ldd	r19, Y+4	; 0x04
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	29 f0       	breq	.+10     	; 0xf5c <DcMotor_Rotate+0x3e>
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	61 f0       	breq	.+24     	; 0xf72 <DcMotor_Rotate+0x54>
     f5a:	20 c0       	rjmp	.+64     	; 0xf9c <DcMotor_Rotate+0x7e>

	/* Stop the motor */
	case STOP:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
     f70:	15 c0       	rjmp	.+42     	; 0xf9c <DcMotor_Rotate+0x7e>
		break;

		/* Rotate Clockwise */
	case CLOCKWISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_HIGH);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_LOW);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <DcMotor_Rotate+0x7e>
		break;

		/* Rotate Anti-clockwise */
	case ANTICLOCKWISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, LOGIC_LOW);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, LOGIC_HIGH);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <GPIO_setupPinDirection+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <GPIO_setupPinDirection+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <GPIO_setupPinDirection+0x1c>
     fc4:	d5 c0       	rjmp	.+426    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	84 30       	cpi	r24, 0x04	; 4
     fca:	08 f0       	brcs	.+2      	; 0xfce <GPIO_setupPinDirection+0x24>
     fcc:	d1 c0       	rjmp	.+418    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3d 83       	std	Y+5, r19	; 0x05
     fd6:	2c 83       	std	Y+4, r18	; 0x04
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <GPIO_setupPinDirection+0x3a>
     fe2:	43 c0       	rjmp	.+134    	; 0x106a <GPIO_setupPinDirection+0xc0>
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	3d 81       	ldd	r19, Y+5	; 0x05
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	2c f4       	brge	.+10     	; 0xff8 <GPIO_setupPinDirection+0x4e>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	71 f0       	breq	.+28     	; 0x1012 <GPIO_setupPinDirection+0x68>
     ff6:	bc c0       	rjmp	.+376    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <GPIO_setupPinDirection+0x5a>
    1002:	5f c0       	rjmp	.+190    	; 0x10c2 <GPIO_setupPinDirection+0x118>
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <GPIO_setupPinDirection+0x66>
    100e:	85 c0       	rjmp	.+266    	; 0x111a <GPIO_setupPinDirection+0x170>
    1010:	af c0       	rjmp	.+350    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	a1 f4       	brne	.+40     	; 0x1040 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1018:	aa e3       	ldi	r26, 0x3A	; 58
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ea e3       	ldi	r30, 0x3A	; 58
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x8c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x88>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	98 c0       	rjmp	.+304    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1040:	aa e3       	ldi	r26, 0x3A	; 58
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ea e3       	ldi	r30, 0x3A	; 58
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_setupPinDirection+0xb4>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_setupPinDirection+0xb0>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	83 c0       	rjmp	.+262    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1070:	a7 e3       	ldi	r26, 0x37	; 55
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e7 e3       	ldi	r30, 0x37	; 55
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0xe4>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0xe0>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	6c c0       	rjmp	.+216    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1098:	a7 e3       	ldi	r26, 0x37	; 55
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e3       	ldi	r30, 0x37	; 55
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_setupPinDirection+0x10c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_setupPinDirection+0x108>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	57 c0       	rjmp	.+174    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10c8:	a4 e3       	ldi	r26, 0x34	; 52
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e4 e3       	ldi	r30, 0x34	; 52
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_setupPinDirection+0x13c>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_setupPinDirection+0x138>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	40 c0       	rjmp	.+128    	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10f0:	a4 e3       	ldi	r26, 0x34	; 52
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e4 e3       	ldi	r30, 0x34	; 52
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_setupPinDirection+0x164>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_setupPinDirection+0x160>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	2b c0       	rjmp	.+86     	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	a1 f4       	brne	.+40     	; 0x1148 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1120:	a1 e3       	ldi	r26, 0x31	; 49
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e1 e3       	ldi	r30, 0x31	; 49
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_setupPinDirection+0x194>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_setupPinDirection+0x190>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1148:	a1 e3       	ldi	r26, 0x31	; 49
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e1 e3       	ldi	r30, 0x31	; 49
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_setupPinDirection+0x1bc>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_setupPinDirection+0x1b8>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_writePin+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_writePin+0x8>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	6a 83       	std	Y+2, r22	; 0x02
    1192:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	08 f0       	brcs	.+2      	; 0x119c <GPIO_writePin+0x1c>
    119a:	d5 c0       	rjmp	.+426    	; 0x1346 <GPIO_writePin+0x1c6>
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <GPIO_writePin+0x24>
    11a2:	d1 c0       	rjmp	.+418    	; 0x1346 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3d 83       	std	Y+5, r19	; 0x05
    11ac:	2c 83       	std	Y+4, r18	; 0x04
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <GPIO_writePin+0x3a>
    11b8:	43 c0       	rjmp	.+134    	; 0x1240 <GPIO_writePin+0xc0>
    11ba:	2c 81       	ldd	r18, Y+4	; 0x04
    11bc:	3d 81       	ldd	r19, Y+5	; 0x05
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <GPIO_writePin+0x4e>
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <GPIO_writePin+0x68>
    11cc:	bc c0       	rjmp	.+376    	; 0x1346 <GPIO_writePin+0x1c6>
    11ce:	2c 81       	ldd	r18, Y+4	; 0x04
    11d0:	3d 81       	ldd	r19, Y+5	; 0x05
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <GPIO_writePin+0x5a>
    11d8:	5f c0       	rjmp	.+190    	; 0x1298 <GPIO_writePin+0x118>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <GPIO_writePin+0x66>
    11e4:	85 c0       	rjmp	.+266    	; 0x12f0 <GPIO_writePin+0x170>
    11e6:	af c0       	rjmp	.+350    	; 0x1346 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11ee:	ab e3       	ldi	r26, 0x3B	; 59
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_writePin+0x8c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_writePin+0x88>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	98 c0       	rjmp	.+304    	; 0x1346 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_writePin+0xb4>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_writePin+0xb0>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	83 c0       	rjmp	.+262    	; 0x1346 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1246:	a8 e3       	ldi	r26, 0x38	; 56
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e8 e3       	ldi	r30, 0x38	; 56
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_writePin+0xe4>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_writePin+0xe0>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	6c c0       	rjmp	.+216    	; 0x1346 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    126e:	a8 e3       	ldi	r26, 0x38	; 56
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e3       	ldi	r30, 0x38	; 56
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0x10c>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0x108>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	57 c0       	rjmp	.+174    	; 0x1346 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	a1 f4       	brne	.+40     	; 0x12c6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    129e:	a5 e3       	ldi	r26, 0x35	; 53
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <GPIO_writePin+0x13c>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <GPIO_writePin+0x138>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_writePin+0x164>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_writePin+0x160>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	2b c0       	rjmp	.+86     	; 0x1346 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	a1 f4       	brne	.+40     	; 0x131e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12f6:	a2 e3       	ldi	r26, 0x32	; 50
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_writePin+0x194>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_writePin+0x190>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    131e:	a2 e3       	ldi	r26, 0x32	; 50
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x1bc>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x1b8>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <GPIO_readPin+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_readPin+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1368:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 30       	cpi	r24, 0x08	; 8
    136e:	08 f0       	brcs	.+2      	; 0x1372 <GPIO_readPin+0x1c>
    1370:	84 c0       	rjmp	.+264    	; 0x147a <GPIO_readPin+0x124>
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	08 f0       	brcs	.+2      	; 0x137a <GPIO_readPin+0x24>
    1378:	80 c0       	rjmp	.+256    	; 0x147a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3d 83       	std	Y+5, r19	; 0x05
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	4c 81       	ldd	r20, Y+4	; 0x04
    1386:	5d 81       	ldd	r21, Y+5	; 0x05
    1388:	41 30       	cpi	r20, 0x01	; 1
    138a:	51 05       	cpc	r21, r1
    138c:	79 f1       	breq	.+94     	; 0x13ec <GPIO_readPin+0x96>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	91 05       	cpc	r25, r1
    1396:	34 f4       	brge	.+12     	; 0x13a4 <GPIO_readPin+0x4e>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	21 15       	cp	r18, r1
    139e:	31 05       	cpc	r19, r1
    13a0:	69 f0       	breq	.+26     	; 0x13bc <GPIO_readPin+0x66>
    13a2:	6b c0       	rjmp	.+214    	; 0x147a <GPIO_readPin+0x124>
    13a4:	4c 81       	ldd	r20, Y+4	; 0x04
    13a6:	5d 81       	ldd	r21, Y+5	; 0x05
    13a8:	42 30       	cpi	r20, 0x02	; 2
    13aa:	51 05       	cpc	r21, r1
    13ac:	b9 f1       	breq	.+110    	; 0x141c <GPIO_readPin+0xc6>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <GPIO_readPin+0x64>
    13b8:	49 c0       	rjmp	.+146    	; 0x144c <GPIO_readPin+0xf6>
    13ba:	5f c0       	rjmp	.+190    	; 0x147a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13bc:	e9 e3       	ldi	r30, 0x39	; 57
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <GPIO_readPin+0x7e>
    13d0:	55 95       	asr	r21
    13d2:	47 95       	ror	r20
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <GPIO_readPin+0x7a>
    13d8:	ca 01       	movw	r24, r20
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	88 23       	and	r24, r24
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	49 c0       	rjmp	.+146    	; 0x147a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	47 c0       	rjmp	.+142    	; 0x147a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13ec:	e6 e3       	ldi	r30, 0x36	; 54
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <GPIO_readPin+0xae>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <GPIO_readPin+0xaa>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	90 70       	andi	r25, 0x00	; 0
    140e:	88 23       	and	r24, r24
    1410:	19 f0       	breq	.+6      	; 0x1418 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	31 c0       	rjmp	.+98     	; 0x147a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1418:	19 82       	std	Y+1, r1	; 0x01
    141a:	2f c0       	rjmp	.+94     	; 0x147a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    141c:	e3 e3       	ldi	r30, 0x33	; 51
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <GPIO_readPin+0xde>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <GPIO_readPin+0xda>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	90 70       	andi	r25, 0x00	; 0
    143e:	88 23       	and	r24, r24
    1440:	19 f0       	breq	.+6      	; 0x1448 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	19 c0       	rjmp	.+50     	; 0x147a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	17 c0       	rjmp	.+46     	; 0x147a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    144c:	e0 e3       	ldi	r30, 0x30	; 48
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_readPin+0x10e>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_readPin+0x10a>
    1468:	ca 01       	movw	r24, r20
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	90 70       	andi	r25, 0x00	; 0
    146e:	88 23       	and	r24, r24
    1470:	19 f0       	breq	.+6      	; 0x1478 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	01 c0       	rjmp	.+2      	; 0x147a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1478:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <GPIO_setupPortDirection+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_setupPortDirection+0x8>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	90 f5       	brcc	.+100    	; 0x1506 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3c 83       	std	Y+4, r19	; 0x04
    14aa:	2b 83       	std	Y+3, r18	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	d1 f0       	breq	.+52     	; 0x14ea <GPIO_setupPortDirection+0x5e>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <GPIO_setupPortDirection+0x3e>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <GPIO_setupPortDirection+0x54>
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <GPIO_setupPortDirection+0x7a>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <GPIO_setupPortDirection+0x68>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <GPIO_setupPortDirection+0x72>
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14e0:	ea e3       	ldi	r30, 0x3A	; 58
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	80 83       	st	Z, r24
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14f4:	e4 e3       	ldi	r30, 0x34	; 52
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14fe:	e1 e3       	ldi	r30, 0x31	; 49
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 83       	st	Z, r24
			break;
		}
	}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_writePort+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <GPIO_writePort+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	90 f5       	brcc	.+100    	; 0x158e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3c 83       	std	Y+4, r19	; 0x04
    1532:	2b 83       	std	Y+3, r18	; 0x03
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	91 05       	cpc	r25, r1
    153c:	d1 f0       	breq	.+52     	; 0x1572 <GPIO_writePort+0x5e>
    153e:	2b 81       	ldd	r18, Y+3	; 0x03
    1540:	3c 81       	ldd	r19, Y+4	; 0x04
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <GPIO_writePort+0x3e>
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	61 f0       	breq	.+24     	; 0x1568 <GPIO_writePort+0x54>
    1550:	1e c0       	rjmp	.+60     	; 0x158e <GPIO_writePort+0x7a>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	81 f0       	breq	.+32     	; 0x157c <GPIO_writePort+0x68>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	81 f0       	breq	.+32     	; 0x1586 <GPIO_writePort+0x72>
    1566:	13 c0       	rjmp	.+38     	; 0x158e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1568:	eb e3       	ldi	r30, 0x3B	; 59
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 83       	st	Z, r24
    1570:	0e c0       	rjmp	.+28     	; 0x158e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1572:	e8 e3       	ldi	r30, 0x38	; 56
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	80 83       	st	Z, r24
    157a:	09 c0       	rjmp	.+18     	; 0x158e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	80 83       	st	Z, r24
    1584:	04 c0       	rjmp	.+8      	; 0x158e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1586:	e2 e3       	ldi	r30, 0x32	; 50
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
			break;
		}
	}
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <GPIO_readPort+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_readPort+0x8>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15aa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	90 f5       	brcc	.+100    	; 0x1616 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3c 83       	std	Y+4, r19	; 0x04
    15ba:	2b 83       	std	Y+3, r18	; 0x03
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	91 05       	cpc	r25, r1
    15c4:	d1 f0       	breq	.+52     	; 0x15fa <GPIO_readPort+0x5e>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <GPIO_readPort+0x3e>
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <GPIO_readPort+0x54>
    15d8:	1e c0       	rjmp	.+60     	; 0x1616 <GPIO_readPort+0x7a>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	81 f0       	breq	.+32     	; 0x1604 <GPIO_readPort+0x68>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	91 05       	cpc	r25, r1
    15ec:	81 f0       	breq	.+32     	; 0x160e <GPIO_readPort+0x72>
    15ee:	13 c0       	rjmp	.+38     	; 0x1616 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15f0:	e9 e3       	ldi	r30, 0x39	; 57
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15fa:	e6 e3       	ldi	r30, 0x36	; 54
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1604:	e3 e3       	ldi	r30, 0x33	; 51
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    160e:	e0 e3       	ldi	r30, 0x30	; 48
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <I2C_init>:
#include "i2c.h"
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void I2C_init(void) {
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWEN);
    162e:	a6 e5       	ldi	r26, 0x56	; 86
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e6 e5       	ldi	r30, 0x56	; 86
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	84 60       	ori	r24, 0x04	; 4
    163a:	8c 93       	st	X, r24
	TWBR = 2;
    163c:	e0 e2       	ldi	r30, 0x20	; 32
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	80 83       	st	Z, r24
	TWSR = 0;
    1644:	e1 e2       	ldi	r30, 0x21	; 33
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	10 82       	st	Z, r1
	TWAR = (0x01 << 1);
    164a:	e2 e2       	ldi	r30, 0x22	; 34
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	80 83       	st	Z, r24
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <TWI_start>:

void TWI_start(void) {
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1660:	e6 e5       	ldi	r30, 0x56	; 86
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	84 ea       	ldi	r24, 0xA4	; 164
    1666:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1668:	e6 e5       	ldi	r30, 0x56	; 86
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	88 23       	and	r24, r24
    1670:	dc f7       	brge	.-10     	; 0x1668 <TWI_start+0x10>
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <I2C_stop>:


void I2C_stop(void){
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1680:	e6 e5       	ldi	r30, 0x56	; 86
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	84 e9       	ldi	r24, 0x94	; 148
    1686:	80 83       	st	Z, r24
}
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <I2C_writeByte>:



void I2C_writeByte(uint8 data){
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    169a:	e3 e2       	ldi	r30, 0x23	; 35
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	80 83       	st	Z, r24
	TWCR=(1<TWINT)|(1<<TWEN);
    16a2:	e6 e5       	ldi	r30, 0x56	; 86
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	80 83       	st	Z, r24
}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <I2C_getStatus>:

uint8 I2C_getStatus(void){
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	uint8 status= TWSR|0xF8;
    16bc:	e1 e2       	ldi	r30, 0x21	; 33
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 6f       	ori	r24, 0xF8	; 248
    16c4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <KEYPAD_getPressedKey+0x6>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    16dc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    16de:	1b 82       	std	Y+3, r1	; 0x03
    16e0:	43 c0       	rjmp	.+134    	; 0x1768 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	98 2f       	mov	r25, r24
    16ee:	9c 5f       	subi	r25, 0xFC	; 252
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	69 2f       	mov	r22, r25
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 01       	movw	r18, r24
    1702:	2c 5f       	subi	r18, 0xFC	; 252
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <KEYPAD_getPressedKey+0x40>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	2a 95       	dec	r18
    1712:	e2 f7       	brpl	.-8      	; 0x170c <KEYPAD_getPressedKey+0x3c>
    1714:	80 95       	com	r24
    1716:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	69 81       	ldd	r22, Y+1	; 0x01
    171c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	1c c0       	rjmp	.+56     	; 0x175c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	6a 81       	ldd	r22, Y+2	; 0x02
    1728:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_readPin>
    172c:	88 23       	and	r24, r24
    172e:	99 f4       	brne	.+38     	; 0x1756 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	98 2f       	mov	r25, r24
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	89 0f       	add	r24, r25
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	08 f3       	brcs	.-62     	; 0x1724 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	84 30       	cpi	r24, 0x04	; 4
    176c:	08 f4       	brcc	.+2      	; 0x1770 <KEYPAD_getPressedKey+0xa0>
    176e:	b9 cf       	rjmp	.-142    	; 0x16e2 <KEYPAD_getPressedKey+0x12>
    1770:	b6 cf       	rjmp	.-148    	; 0x16de <KEYPAD_getPressedKey+0xe>

00001772 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <KEYPAD_4x4_adjustKeyNumber+0x8>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1780:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3c 83       	std	Y+4, r19	; 0x04
    178a:	2b 83       	std	Y+3, r18	; 0x03
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	91 05       	cpc	r25, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1796:	70 c0       	rjmp	.+224    	; 0x1878 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	29 30       	cpi	r18, 0x09	; 9
    179e:	31 05       	cpc	r19, r1
    17a0:	5c f5       	brge	.+86     	; 0x17f8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <KEYPAD_4x4_adjustKeyNumber+0x3c>
    17ac:	59 c0       	rjmp	.+178    	; 0x1860 <KEYPAD_4x4_adjustKeyNumber+0xee>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	25 30       	cpi	r18, 0x05	; 5
    17b4:	31 05       	cpc	r19, r1
    17b6:	9c f4       	brge	.+38     	; 0x17de <KEYPAD_4x4_adjustKeyNumber+0x6c>
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17c2:	48 c0       	rjmp	.+144    	; 0x1854 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	23 30       	cpi	r18, 0x03	; 3
    17ca:	31 05       	cpc	r19, r1
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17ce:	45 c0       	rjmp	.+138    	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    17da:	39 c0       	rjmp	.+114    	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    17dc:	67 c0       	rjmp	.+206    	; 0x18ac <KEYPAD_4x4_adjustKeyNumber+0x13a>
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	26 30       	cpi	r18, 0x06	; 6
    17e4:	31 05       	cpc	r19, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x78>
    17e8:	41 c0       	rjmp	.+130    	; 0x186c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	87 30       	cpi	r24, 0x07	; 7
    17f0:	91 05       	cpc	r25, r1
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    17f4:	3e c0       	rjmp	.+124    	; 0x1872 <KEYPAD_4x4_adjustKeyNumber+0x100>
    17f6:	37 c0       	rjmp	.+110    	; 0x1866 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	2c 30       	cpi	r18, 0x0C	; 12
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1802:	46 c0       	rjmp	.+140    	; 0x1890 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	8d 30       	cpi	r24, 0x0D	; 13
    180a:	91 05       	cpc	r25, r1
    180c:	5c f4       	brge	.+22     	; 0x1824 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	2a 30       	cpi	r18, 0x0A	; 10
    1814:	31 05       	cpc	r19, r1
    1816:	b1 f1       	breq	.+108    	; 0x1884 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	8b 30       	cpi	r24, 0x0B	; 11
    181e:	91 05       	cpc	r25, r1
    1820:	a4 f5       	brge	.+104    	; 0x188a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1822:	2d c0       	rjmp	.+90     	; 0x187e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1824:	2b 81       	ldd	r18, Y+3	; 0x03
    1826:	3c 81       	ldd	r19, Y+4	; 0x04
    1828:	2e 30       	cpi	r18, 0x0E	; 14
    182a:	31 05       	cpc	r19, r1
    182c:	b9 f1       	breq	.+110    	; 0x189c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	8e 30       	cpi	r24, 0x0E	; 14
    1834:	91 05       	cpc	r25, r1
    1836:	7c f1       	brlt	.+94     	; 0x1896 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	2f 30       	cpi	r18, 0x0F	; 15
    183e:	31 05       	cpc	r19, r1
    1840:	79 f1       	breq	.+94     	; 0x18a0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	80 31       	cpi	r24, 0x10	; 16
    1848:	91 05       	cpc	r25, r1
    184a:	69 f1       	breq	.+90     	; 0x18a6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    184c:	2f c0       	rjmp	.+94     	; 0x18ac <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    184e:	87 e0       	ldi	r24, 0x07	; 7
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	2e c0       	rjmp	.+92     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	2b c0       	rjmp	.+86     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    185a:	89 e0       	ldi	r24, 0x09	; 9
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	28 c0       	rjmp	.+80     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1860:	85 e2       	ldi	r24, 0x25	; 37
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	25 c0       	rjmp	.+74     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	22 c0       	rjmp	.+68     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    186c:	85 e0       	ldi	r24, 0x05	; 5
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	1f c0       	rjmp	.+62     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1872:	86 e0       	ldi	r24, 0x06	; 6
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	1c c0       	rjmp	.+56     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1878:	8a e2       	ldi	r24, 0x2A	; 42
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	19 c0       	rjmp	.+50     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	16 c0       	rjmp	.+44     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	13 c0       	rjmp	.+38     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	10 c0       	rjmp	.+32     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1890:	8d e2       	ldi	r24, 0x2D	; 45
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	0d c0       	rjmp	.+26     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1896:	8d e0       	ldi	r24, 0x0D	; 13
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    189c:	19 82       	std	Y+1, r1	; 0x01
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    18a0:	8d e3       	ldi	r24, 0x3D	; 61
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    18a6:	8b e2       	ldi	r24, 0x2B	; 43
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <LCD_init>:
#include <util/delay.h>
#include "common_macros.h"
#include "lcd.h"
#include "gpio.h"

void LCD_init(void) {
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	66 e0       	ldi	r22, 0x06	; 6
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	65 e0       	ldi	r22, 0x05	; 5
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PIN_OUTPUT);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPortDirection>
	LCD_TWO_LINES_8BITS_MODE();
    18ee:	88 e3       	ldi	r24, 0x38	; 56
    18f0:	0e 94 83 0c 	call	0x1906	; 0x1906 <LCD_sendCommand>
	LCD_CURSOR_OFF();
    18f4:	8c e0       	ldi	r24, 0x0C	; 12
    18f6:	0e 94 83 0c 	call	0x1906	; 0x1906 <LCD_sendCommand>
	LCD_CLEAR_SCREEN();
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	0e 94 83 0c 	call	0x1906	; 0x1906 <LCD_sendCommand>
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command) {
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	e9 97       	sbiw	r28, 0x39	; 57
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	64 e0       	ldi	r22, 0x04	; 4
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	65 e0       	ldi	r22, 0x05	; 5
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	8d ab       	std	Y+53, r24	; 0x35
    193a:	9e ab       	std	Y+54, r25	; 0x36
    193c:	af ab       	std	Y+55, r26	; 0x37
    193e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6d a9       	ldd	r22, Y+53	; 0x35
    1942:	7e a9       	ldd	r23, Y+54	; 0x36
    1944:	8f a9       	ldd	r24, Y+55	; 0x37
    1946:	98 ad       	ldd	r25, Y+56	; 0x38
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	89 ab       	std	Y+49, r24	; 0x31
    195a:	9a ab       	std	Y+50, r25	; 0x32
    195c:	ab ab       	std	Y+51, r26	; 0x33
    195e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1960:	69 a9       	ldd	r22, Y+49	; 0x31
    1962:	7a a9       	ldd	r23, Y+50	; 0x32
    1964:	8b a9       	ldd	r24, Y+51	; 0x33
    1966:	9c a9       	ldd	r25, Y+52	; 0x34
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 ab       	std	Y+48, r25	; 0x30
    197e:	8f a7       	std	Y+47, r24	; 0x2f
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1982:	69 a9       	ldd	r22, Y+49	; 0x31
    1984:	7a a9       	ldd	r23, Y+50	; 0x32
    1986:	8b a9       	ldd	r24, Y+51	; 0x33
    1988:	9c a9       	ldd	r25, Y+52	; 0x34
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6d a9       	ldd	r22, Y+53	; 0x35
    199c:	7e a9       	ldd	r23, Y+54	; 0x36
    199e:	8f a9       	ldd	r24, Y+55	; 0x37
    19a0:	98 ad       	ldd	r25, Y+56	; 0x38
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_sendCommand+0xdc>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9e a7       	std	Y+46, r25	; 0x2e
    19ca:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_sendCommand+0xca>
    19d4:	9e a7       	std	Y+46, r25	; 0x2e
    19d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e4:	98 a9       	ldd	r25, Y+48	; 0x30
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_sendCommand+0xbe>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	69 a9       	ldd	r22, Y+49	; 0x31
    19ee:	7a a9       	ldd	r23, Y+50	; 0x32
    19f0:	8b a9       	ldd	r24, Y+51	; 0x33
    19f2:	9c a9       	ldd	r25, Y+52	; 0x34
    19f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a02:	98 a9       	ldd	r25, Y+48	; 0x30
    1a04:	9c a7       	std	Y+44, r25	; 0x2c
    1a06:	8b a7       	std	Y+43, r24	; 0x2b
    1a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_sendCommand+0x106>
    1a10:	9c a7       	std	Y+44, r25	; 0x2c
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	66 e0       	ldi	r22, 0x06	; 6
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8f a3       	std	Y+39, r24	; 0x27
    1a28:	98 a7       	std	Y+40, r25	; 0x28
    1a2a:	a9 a7       	std	Y+41, r26	; 0x29
    1a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8b a3       	std	Y+35, r24	; 0x23
    1a48:	9c a3       	std	Y+36, r25	; 0x24
    1a4a:	ad a3       	std	Y+37, r26	; 0x25
    1a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_sendCommand+0x1ca>
    1ab2:	88 ec       	ldi	r24, 0xC8	; 200
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	98 a1       	ldd	r25, Y+32	; 0x20
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_sendCommand+0x1b8>
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_sendCommand+0x1ac>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_sendCommand+0x1f4>
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	69 ad       	ldd	r22, Y+57	; 0x39
    1b06:	0e 94 8a 0a 	call	0x1514	; 0x1514 <GPIO_writePort>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e8       	ldi	r26, 0x80	; 128
    1b10:	bf e3       	ldi	r27, 0x3F	; 63
    1b12:	89 8f       	std	Y+25, r24	; 0x19
    1b14:	9a 8f       	std	Y+26, r25	; 0x1a
    1b16:	ab 8f       	std	Y+27, r26	; 0x1b
    1b18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a ef       	ldi	r20, 0xFA	; 250
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8d 8b       	std	Y+21, r24	; 0x15
    1b34:	9e 8b       	std	Y+22, r25	; 0x16
    1b36:	af 8b       	std	Y+23, r26	; 0x17
    1b38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_sendCommand+0x256>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	69 8d       	ldd	r22, Y+25	; 0x19
    1b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <LCD_sendCommand+0x2b6>
    1b9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
    1ba6:	89 89       	ldd	r24, Y+17	; 0x11
    1ba8:	9a 89       	ldd	r25, Y+18	; 0x12
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0x2a4>
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <LCD_sendCommand+0x298>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	98 89       	ldd	r25, Y+16	; 0x10
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_sendCommand+0x2e0>
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	66 e0       	ldi	r22, 0x06	; 6
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e8       	ldi	r26, 0x80	; 128
    1bfe:	bf e3       	ldi	r27, 0x3F	; 63
    1c00:	8b 87       	std	Y+11, r24	; 0x0b
    1c02:	9c 87       	std	Y+12, r25	; 0x0c
    1c04:	ad 87       	std	Y+13, r26	; 0x0d
    1c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8f 83       	std	Y+7, r24	; 0x07
    1c22:	98 87       	std	Y+8, r25	; 0x08
    1c24:	a9 87       	std	Y+9, r26	; 0x09
    1c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <LCD_sendCommand+0x344>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <LCD_sendCommand+0x3a4>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x392>
    1c9c:	9c 83       	std	Y+4, r25	; 0x04
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <LCD_sendCommand+0x386>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_sendCommand+0x3ce>
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cdc:	e9 96       	adiw	r28, 0x39	; 57
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data) {
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	e9 97       	sbiw	r28, 0x39	; 57
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	65 e0       	ldi	r22, 0x05	; 5
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e8       	ldi	r26, 0x80	; 128
    1d1e:	bf e3       	ldi	r27, 0x3F	; 63
    1d20:	8d ab       	std	Y+53, r24	; 0x35
    1d22:	9e ab       	std	Y+54, r25	; 0x36
    1d24:	af ab       	std	Y+55, r26	; 0x37
    1d26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	6d a9       	ldd	r22, Y+53	; 0x35
    1d2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a ef       	ldi	r20, 0xFA	; 250
    1d36:	54 e4       	ldi	r21, 0x44	; 68
    1d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	89 ab       	std	Y+49, r24	; 0x31
    1d42:	9a ab       	std	Y+50, r25	; 0x32
    1d44:	ab ab       	std	Y+51, r26	; 0x33
    1d46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d48:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	98 ab       	std	Y+48, r25	; 0x30
    1d66:	8f a7       	std	Y+47, r24	; 0x2f
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1d6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d70:	9c a9       	ldd	r25, Y+52	; 0x34
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	6d a9       	ldd	r22, Y+53	; 0x35
    1d84:	7e a9       	ldd	r23, Y+54	; 0x36
    1d86:	8f a9       	ldd	r24, Y+55	; 0x37
    1d88:	98 ad       	ldd	r25, Y+56	; 0x38
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	98 ab       	std	Y+48, r25	; 0x30
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <LCD_displayCharacter+0xdc>
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9e a7       	std	Y+46, r25	; 0x2e
    1db2:	8d a7       	std	Y+45, r24	; 0x2d
    1db4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1db6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_displayCharacter+0xca>
    1dbc:	9e a7       	std	Y+46, r25	; 0x2e
    1dbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dcc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <LCD_displayCharacter+0xbe>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dda:	9c a9       	ldd	r25, Y+52	; 0x34
    1ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	98 ab       	std	Y+48, r25	; 0x30
    1de6:	8f a7       	std	Y+47, r24	; 0x2f
    1de8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dea:	98 a9       	ldd	r25, Y+48	; 0x30
    1dec:	9c a7       	std	Y+44, r25	; 0x2c
    1dee:	8b a7       	std	Y+43, r24	; 0x2b
    1df0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1df2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_displayCharacter+0x106>
    1df8:	9c a7       	std	Y+44, r25	; 0x2c
    1dfa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	bf e3       	ldi	r27, 0x3F	; 63
    1e0e:	8f a3       	std	Y+39, r24	; 0x27
    1e10:	98 a7       	std	Y+40, r25	; 0x28
    1e12:	a9 a7       	std	Y+41, r26	; 0x29
    1e14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	6f a1       	ldd	r22, Y+39	; 0x27
    1e18:	78 a5       	ldd	r23, Y+40	; 0x28
    1e1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4a ef       	ldi	r20, 0xFA	; 250
    1e24:	54 e4       	ldi	r21, 0x44	; 68
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8b a3       	std	Y+35, r24	; 0x23
    1e30:	9c a3       	std	Y+36, r25	; 0x24
    1e32:	ad a3       	std	Y+37, r26	; 0x25
    1e34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e36:	6b a1       	ldd	r22, Y+35	; 0x23
    1e38:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9a a3       	std	Y+34, r25	; 0x22
    1e54:	89 a3       	std	Y+33, r24	; 0x21
    1e56:	3f c0       	rjmp	.+126    	; 0x1ed6 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	4c f5       	brge	.+82     	; 0x1ec2 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	6f a1       	ldd	r22, Y+39	; 0x27
    1e72:	78 a5       	ldd	r23, Y+40	; 0x28
    1e74:	89 a5       	ldd	r24, Y+41	; 0x29
    1e76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9a a3       	std	Y+34, r25	; 0x22
    1e96:	89 a3       	std	Y+33, r24	; 0x21
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <LCD_displayCharacter+0x1ca>
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	98 a3       	std	Y+32, r25	; 0x20
    1ea0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ea4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_displayCharacter+0x1b8>
    1eaa:	98 a3       	std	Y+32, r25	; 0x20
    1eac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eba:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <LCD_displayCharacter+0x1ac>
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9a a3       	std	Y+34, r25	; 0x22
    1ed4:	89 a3       	std	Y+33, r24	; 0x21
    1ed6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eda:	9e 8f       	std	Y+30, r25	; 0x1e
    1edc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_displayCharacter+0x1f4>
    1ee6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	69 ad       	ldd	r22, Y+57	; 0x39
    1eee:	0e 94 8a 0a 	call	0x1514	; 0x1514 <GPIO_writePort>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	bf e3       	ldi	r27, 0x3F	; 63
    1efa:	89 8f       	std	Y+25, r24	; 0x19
    1efc:	9a 8f       	std	Y+26, r25	; 0x1a
    1efe:	ab 8f       	std	Y+27, r26	; 0x1b
    1f00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	69 8d       	ldd	r22, Y+25	; 0x19
    1f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a ef       	ldi	r20, 0xFA	; 250
    1f10:	54 e4       	ldi	r21, 0x44	; 68
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8d 8b       	std	Y+21, r24	; 0x15
    1f1c:	9e 8b       	std	Y+22, r25	; 0x16
    1f1e:	af 8b       	std	Y+23, r26	; 0x17
    1f20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f22:	6d 89       	ldd	r22, Y+21	; 0x15
    1f24:	7e 89       	ldd	r23, Y+22	; 0x16
    1f26:	8f 89       	ldd	r24, Y+23	; 0x17
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1f44:	6d 89       	ldd	r22, Y+21	; 0x15
    1f46:	7e 89       	ldd	r23, Y+22	; 0x16
    1f48:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9c 8b       	std	Y+20, r25	; 0x14
    1f82:	8b 8b       	std	Y+19, r24	; 0x13
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <LCD_displayCharacter+0x2b6>
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
    1f8e:	89 89       	ldd	r24, Y+17	; 0x11
    1f90:	9a 89       	ldd	r25, Y+18	; 0x12
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_displayCharacter+0x2a4>
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <LCD_displayCharacter+0x298>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
    1fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fcc:	98 89       	ldd	r25, Y+16	; 0x10
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_displayCharacter+0x2e0>
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	66 e0       	ldi	r22, 0x06	; 6
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_writePin>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e8       	ldi	r26, 0x80	; 128
    1fe6:	bf e3       	ldi	r27, 0x3F	; 63
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
    1fea:	9c 87       	std	Y+12, r25	; 0x0c
    1fec:	ad 87       	std	Y+13, r26	; 0x0d
    1fee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a ef       	ldi	r20, 0xFA	; 250
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8f 83       	std	Y+7, r24	; 0x07
    200a:	98 87       	std	Y+8, r25	; 0x08
    200c:	a9 87       	std	Y+9, r26	; 0x09
    200e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2032:	6f 81       	ldd	r22, Y+7	; 0x07
    2034:	78 85       	ldd	r23, Y+8	; 0x08
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	6b 85       	ldd	r22, Y+11	; 0x0b
    204c:	7c 85       	ldd	r23, Y+12	; 0x0c
    204e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2050:	9e 85       	ldd	r25, Y+14	; 0x0e
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <LCD_displayCharacter+0x3a4>
    2074:	88 ec       	ldi	r24, 0xC8	; 200
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_displayCharacter+0x392>
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <LCD_displayCharacter+0x386>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_displayCharacter+0x3ce>
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20c4:	e9 96       	adiw	r28, 0x39	; 57
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_displayString>:

void LCD_displayString(const char * data){
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_displayString+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_displayString+0x8>
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    20e6:	1a 82       	std	Y+2, r1	; 0x02
    20e8:	19 82       	std	Y+1, r1	; 0x01
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_displayString+0x34>
	while(data[i]!='\0'){
		LCD_displayCharacter(*(data+i));
    20ec:	29 81       	ldd	r18, Y+1	; 0x01
    20ee:	3a 81       	ldd	r19, Y+2	; 0x02
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	80 81       	ld	r24, Z
    20fc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_displayCharacter>
		i++;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_displayString(const char * data){
	int i=0;
	while(data[i]!='\0'){
    210a:	29 81       	ldd	r18, Y+1	; 0x01
    210c:	3a 81       	ldd	r19, Y+2	; 0x02
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	fc 01       	movw	r30, r24
    2114:	e2 0f       	add	r30, r18
    2116:	f3 1f       	adc	r31, r19
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	39 f7       	brne	.-50     	; 0x20ec <LCD_displayString+0x16>
		LCD_displayCharacter(*(data+i));
		i++;
	}
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <LCD_moveCursor+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <LCD_moveCursor+0x8>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3d 83       	std	Y+5, r19	; 0x05
    2146:	2c 83       	std	Y+4, r18	; 0x04
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	9d 81       	ldd	r25, Y+5	; 0x05
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	c1 f0       	breq	.+48     	; 0x2182 <LCD_moveCursor+0x56>
    2152:	2c 81       	ldd	r18, Y+4	; 0x04
    2154:	3d 81       	ldd	r19, Y+5	; 0x05
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_moveCursor+0x3a>
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <LCD_moveCursor+0x50>
    2164:	19 c0       	rjmp	.+50     	; 0x2198 <LCD_moveCursor+0x6c>
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	69 f0       	breq	.+26     	; 0x218a <LCD_moveCursor+0x5e>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	61 f0       	breq	.+24     	; 0x2192 <LCD_moveCursor+0x66>
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	0b c0       	rjmp	.+22     	; 0x2198 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	80 5c       	subi	r24, 0xC0	; 192
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	80 5f       	subi	r24, 0xF0	; 240
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	80 5b       	subi	r24, 0xB0	; 176
    2196:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_SET_CURSOR_LOCATION(lcd_memory_address);
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	80 68       	ori	r24, 0x80	; 128
    219c:	0e 94 83 0c 	call	0x1906	; 0x1906 <LCD_sendCommand>
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_displayStringRowColumn+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <LCD_displayStringRowColumn+0x8>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	6a 83       	std	Y+2, r22	; 0x02
    21c0:	5c 83       	std	Y+4, r21	; 0x04
    21c2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	6a 81       	ldd	r22, Y+2	; 0x02
    21c8:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_displayString>
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	62 97       	sbiw	r28, 0x12	; 18
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	9a 8b       	std	Y+18, r25	; 0x12
    21f8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	9a 89       	ldd	r25, Y+18	; 0x12
    21fe:	9e 01       	movw	r18, r28
    2200:	2f 5f       	subi	r18, 0xFF	; 255
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	b9 01       	movw	r22, r18
    2206:	4a e0       	ldi	r20, 0x0A	; 10
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <itoa>
   LCD_displayString(buff); /* Display the string */
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_displayString>
}
    2216:	62 96       	adiw	r28, 0x12	; 18
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <LM35_getTemperature>:
#include "lm35_sensor.h"

#include "adc.h" /* To get digital value from ADC channel */

uint8 LM35_getTemperature(void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <LM35_getTemperature+0x6>
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value;

	uint16 adc_value;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	0e 94 3d 07 	call	0xe7a	; 0xe7a <ADC_readChannel>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value = (sensor maximum temperature * ADC reference volt)/(ADC maximum value * Sensor Maximum voltage */
	temp_value = (uint8)(((uint32)adc_value*LM35_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	cc 01       	movw	r24, r24
    2244:	a0 e0       	ldi	r26, 0x00	; 0
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	26 e9       	ldi	r18, 0x96	; 150
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__mulsi3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	2a e0       	ldi	r18, 0x0A	; 10
    226e:	37 ed       	ldi	r19, 0xD7	; 215
    2270:	43 e2       	ldi	r20, 0x23	; 35
    2272:	50 e4       	ldi	r21, 0x40	; 64
    2274:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 ed       	ldi	r19, 0xD0	; 208
    2284:	4f eb       	ldi	r20, 0xBF	; 191
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <main>:
#include "uart.h"
#include "lcd.h"
#include <avr/io.h>
#define MC2_READY 0x10
int main(void) {
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	a8 97       	sbiw	r28, 0x28	; 40
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
	UART_configType UART_config = { DOUBLE, NORMAL, RECEIVE_INT_DISABLE,
			SEND_INT_DISABLE, EMPTY_INT_DISABLE, RECEIVE_ENABLE, SEND_ENABLE,
			OTHER, ASYNCHRONOUS, STOP_1_BIT, NO_PARITY, EIGHT_OR_NINE_BIT_MODE,
			RISING_TxD, 9600 };
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	9d a3       	std	Y+37, r25	; 0x25
    22c6:	8c a3       	std	Y+36, r24	; 0x24
    22c8:	e8 e6       	ldi	r30, 0x68	; 104
    22ca:	f1 e0       	ldi	r31, 0x01	; 1
    22cc:	ff a3       	std	Y+39, r31	; 0x27
    22ce:	ee a3       	std	Y+38, r30	; 0x26
    22d0:	ff e0       	ldi	r31, 0x0F	; 15
    22d2:	f8 a7       	std	Y+40, r31	; 0x28
    22d4:	ee a1       	ldd	r30, Y+38	; 0x26
    22d6:	ff a1       	ldd	r31, Y+39	; 0x27
    22d8:	00 80       	ld	r0, Z
    22da:	8e a1       	ldd	r24, Y+38	; 0x26
    22dc:	9f a1       	ldd	r25, Y+39	; 0x27
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	9f a3       	std	Y+39, r25	; 0x27
    22e2:	8e a3       	std	Y+38, r24	; 0x26
    22e4:	ec a1       	ldd	r30, Y+36	; 0x24
    22e6:	fd a1       	ldd	r31, Y+37	; 0x25
    22e8:	00 82       	st	Z, r0
    22ea:	8c a1       	ldd	r24, Y+36	; 0x24
    22ec:	9d a1       	ldd	r25, Y+37	; 0x25
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	9d a3       	std	Y+37, r25	; 0x25
    22f2:	8c a3       	std	Y+36, r24	; 0x24
    22f4:	98 a5       	ldd	r25, Y+40	; 0x28
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	98 a7       	std	Y+40, r25	; 0x28
    22fa:	e8 a5       	ldd	r30, Y+40	; 0x28
    22fc:	ee 23       	and	r30, r30
    22fe:	51 f7       	brne	.-44     	; 0x22d4 <main+0x28>
	UART_init(&UART_config);
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_init>
	LCD_init();
    2308:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_init>
	uint8 Str[20];
	/* Send MC2_READY byte to MC1 to ask it to send the string */
		UART_sendByte(MC2_READY);
    230c:	80 e1       	ldi	r24, 0x10	; 16
    230e:	0e 94 4e 12 	call	0x249c	; 0x249c <UART_sendByte>

		/* Receive String from MC1 through UART */
		UART_receiveString(Str);
    2312:	ce 01       	movw	r24, r28
    2314:	40 96       	adiw	r24, 0x10	; 16
    2316:	0e 94 9d 12 	call	0x253a	; 0x253a <UART_receiveString>

		/* Display the received string on the LCD display */
		LCD_displayString(Str);
    231a:	ce 01       	movw	r24, r28
    231c:	40 96       	adiw	r24, 0x10	; 16
    231e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_displayString>
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <main+0x76>

00002324 <PWM_Timer0_Start>:
#include <avr/io.h> /* to access timer0 registers */
#include "gpio.h" /* to set PB3/OC0 as an output pin */



void PWM_Timer0_Start(uint8 duty_cycle){
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	0f 92       	push	r0
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01

	/* Set counter to 0 */
	TCNT0=0;
    2334:	e2 e5       	ldi	r30, 0x52	; 82
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	10 82       	st	Z, r1

	/* set PB3/OC0 as an output pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	63 e0       	ldi	r22, 0x03	; 3
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_setupPinDirection>

	/* OCR0 value = (percentage of duty cycle/100)* (maximum register value = 255) */
	OCR0=(uint8)(((float)duty_cycle/100)*255);
    2344:	0c e5       	ldi	r16, 0x5C	; 92
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	48 ec       	ldi	r20, 0xC8	; 200
    2368:	52 e4       	ldi	r21, 0x42	; 66
    236a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	53 e4       	ldi	r21, 0x43	; 67
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	f8 01       	movw	r30, r16
    2394:	80 83       	st	Z, r24
	/* Timer/Counter Control Register:
	 * 1- Set mode as Fast PWM mode -> WGM00 and WGM01 = 1
	 * 2- Non-Inverting mode -> COM01 = 1
	 * 3- F_CPU/8 Prescalar -> PRESCALAR8 defined as 2 -> CS00 and CS02 =0, CS01=1
	 */
	TCCR0=FAST_PWM_MODE|NON_INVERTING_MODE|PRESCALAR_8;
    2396:	e3 e5       	ldi	r30, 0x53	; 83
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	8a e6       	ldi	r24, 0x6A	; 106
    239c:	80 83       	st	Z, r24

}
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	08 95       	ret

000023aa <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_configType* config)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <UART_init+0x6>
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <UART_init+0x8>
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23ba:	1a 82       	std	Y+2, r1	; 0x02
    23bc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (config->doubleRate)|(config->multiprocessorMode);
    23be:	ab e2       	ldi	r26, 0x2B	; 43
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	90 81       	ld	r25, Z
    23c8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ca:	fc 81       	ldd	r31, Y+4	; 0x04
    23cc:	81 81       	ldd	r24, Z+1	; 0x01
    23ce:	89 2b       	or	r24, r25
    23d0:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (config->receiveEnable)|(config->sendEnable)|(config->receiveIntEnable)|(config->sendIntEnable)|(config->emptyIntEnable)|(config->nineBitMode);
    23d2:	aa e2       	ldi	r26, 0x2A	; 42
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	eb 81       	ldd	r30, Y+3	; 0x03
    23d8:	fc 81       	ldd	r31, Y+4	; 0x04
    23da:	95 81       	ldd	r25, Z+5	; 0x05
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	86 81       	ldd	r24, Z+6	; 0x06
    23e2:	98 2b       	or	r25, r24
    23e4:	eb 81       	ldd	r30, Y+3	; 0x03
    23e6:	fc 81       	ldd	r31, Y+4	; 0x04
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	98 2b       	or	r25, r24
    23ec:	eb 81       	ldd	r30, Y+3	; 0x03
    23ee:	fc 81       	ldd	r31, Y+4	; 0x04
    23f0:	83 81       	ldd	r24, Z+3	; 0x03
    23f2:	98 2b       	or	r25, r24
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	84 81       	ldd	r24, Z+4	; 0x04
    23fa:	98 2b       	or	r25, r24
    23fc:	eb 81       	ldd	r30, Y+3	; 0x03
    23fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2400:	87 81       	ldd	r24, Z+7	; 0x07
    2402:	89 2b       	or	r24, r25
    2404:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (config->bitNumSelect)|(config->modeSelect)|(config->parityMode)|(1<<URSEL)|(config->stopBits)|(config->clockPolarity);
    2406:	a0 e4       	ldi	r26, 0x40	; 64
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	eb 81       	ldd	r30, Y+3	; 0x03
    240c:	fc 81       	ldd	r31, Y+4	; 0x04
    240e:	93 85       	ldd	r25, Z+11	; 0x0b
    2410:	eb 81       	ldd	r30, Y+3	; 0x03
    2412:	fc 81       	ldd	r31, Y+4	; 0x04
    2414:	80 85       	ldd	r24, Z+8	; 0x08
    2416:	98 2b       	or	r25, r24
    2418:	eb 81       	ldd	r30, Y+3	; 0x03
    241a:	fc 81       	ldd	r31, Y+4	; 0x04
    241c:	82 85       	ldd	r24, Z+10	; 0x0a
    241e:	98 2b       	or	r25, r24
    2420:	eb 81       	ldd	r30, Y+3	; 0x03
    2422:	fc 81       	ldd	r31, Y+4	; 0x04
    2424:	81 85       	ldd	r24, Z+9	; 0x09
    2426:	98 2b       	or	r25, r24
    2428:	eb 81       	ldd	r30, Y+3	; 0x03
    242a:	fc 81       	ldd	r31, Y+4	; 0x04
    242c:	84 85       	ldd	r24, Z+12	; 0x0c
    242e:	89 2b       	or	r24, r25
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baudRate * 8UL))) - 1);
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	85 85       	ldd	r24, Z+13	; 0x0d
    243a:	96 85       	ldd	r25, Z+14	; 0x0e
    243c:	cc 01       	movw	r24, r24
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	aa 1f       	adc	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	aa 1f       	adc	r26, r26
    2450:	bb 1f       	adc	r27, r27
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	aa 1f       	adc	r26, r26
    2458:	bb 1f       	adc	r27, r27
    245a:	9c 01       	movw	r18, r24
    245c:	ad 01       	movw	r20, r26
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	92 e1       	ldi	r25, 0x12	; 18
    2462:	aa e7       	ldi	r26, 0x7A	; 122
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodsi4>
    246e:	da 01       	movw	r26, r20
    2470:	c9 01       	movw	r24, r18
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2478:	e0 e4       	ldi	r30, 0x40	; 64
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	89 2f       	mov	r24, r25
    2482:	99 27       	eor	r25, r25
    2484:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2486:	e9 e2       	ldi	r30, 0x29	; 41
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	80 83       	st	Z, r24
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24a8:	eb e2       	ldi	r30, 0x2B	; 43
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	80 72       	andi	r24, 0x20	; 32
    24b4:	90 70       	andi	r25, 0x00	; 0
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	b9 f3       	breq	.-18     	; 0x24a8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24ba:	ec e2       	ldi	r30, 0x2C	; 44
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24d2:	eb e2       	ldi	r30, 0x2B	; 43
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	88 23       	and	r24, r24
    24da:	dc f7       	brge	.-10     	; 0x24d2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    24dc:	ec e2       	ldi	r30, 0x2C	; 44
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <UART_sendString+0x6>
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24f8:	19 82       	std	Y+1, r1	; 0x01
    24fa:	0e c0       	rjmp	.+28     	; 0x2518 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	fc 01       	movw	r30, r24
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	80 81       	ld	r24, Z
    250e:	0e 94 4e 12 	call	0x249c	; 0x249c <UART_sendByte>
		i++;
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	9b 81       	ldd	r25, Y+3	; 0x03
    2522:	fc 01       	movw	r30, r24
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	80 81       	ld	r24, Z
    252a:	88 23       	and	r24, r24
    252c:	39 f7       	brne	.-50     	; 0x24fc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <UART_receiveString+0xa>
    2544:	0f 92       	push	r0
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	9b 83       	std	Y+3, r25	; 0x03
    254c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    254e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	8c 01       	movw	r16, r24
    255c:	02 0f       	add	r16, r18
    255e:	13 1f       	adc	r17, r19
    2560:	0e 94 65 12 	call	0x24ca	; 0x24ca <UART_recieveByte>
    2564:	f8 01       	movw	r30, r16
    2566:	80 83       	st	Z, r24
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	8c 01       	movw	r16, r24
    257c:	02 0f       	add	r16, r18
    257e:	13 1f       	adc	r17, r19
    2580:	0e 94 65 12 	call	0x24ca	; 0x24ca <UART_recieveByte>
    2584:	f8 01       	movw	r30, r16
    2586:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	fc 01       	movw	r30, r24
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	80 81       	ld	r24, Z
    259a:	83 32       	cpi	r24, 0x23	; 35
    259c:	31 f7       	brne	.-52     	; 0x256a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	fc 01       	movw	r30, r24
    25aa:	e2 0f       	add	r30, r18
    25ac:	f3 1f       	adc	r31, r19
    25ae:	10 82       	st	Z, r1
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <__mulsi3>:
    25c0:	62 9f       	mul	r22, r18
    25c2:	d0 01       	movw	r26, r0
    25c4:	73 9f       	mul	r23, r19
    25c6:	f0 01       	movw	r30, r0
    25c8:	82 9f       	mul	r24, r18
    25ca:	e0 0d       	add	r30, r0
    25cc:	f1 1d       	adc	r31, r1
    25ce:	64 9f       	mul	r22, r20
    25d0:	e0 0d       	add	r30, r0
    25d2:	f1 1d       	adc	r31, r1
    25d4:	92 9f       	mul	r25, r18
    25d6:	f0 0d       	add	r31, r0
    25d8:	83 9f       	mul	r24, r19
    25da:	f0 0d       	add	r31, r0
    25dc:	74 9f       	mul	r23, r20
    25de:	f0 0d       	add	r31, r0
    25e0:	65 9f       	mul	r22, r21
    25e2:	f0 0d       	add	r31, r0
    25e4:	99 27       	eor	r25, r25
    25e6:	72 9f       	mul	r23, r18
    25e8:	b0 0d       	add	r27, r0
    25ea:	e1 1d       	adc	r30, r1
    25ec:	f9 1f       	adc	r31, r25
    25ee:	63 9f       	mul	r22, r19
    25f0:	b0 0d       	add	r27, r0
    25f2:	e1 1d       	adc	r30, r1
    25f4:	f9 1f       	adc	r31, r25
    25f6:	bd 01       	movw	r22, r26
    25f8:	cf 01       	movw	r24, r30
    25fa:	11 24       	eor	r1, r1
    25fc:	08 95       	ret

000025fe <__udivmodsi4>:
    25fe:	a1 e2       	ldi	r26, 0x21	; 33
    2600:	1a 2e       	mov	r1, r26
    2602:	aa 1b       	sub	r26, r26
    2604:	bb 1b       	sub	r27, r27
    2606:	fd 01       	movw	r30, r26
    2608:	0d c0       	rjmp	.+26     	; 0x2624 <__udivmodsi4_ep>

0000260a <__udivmodsi4_loop>:
    260a:	aa 1f       	adc	r26, r26
    260c:	bb 1f       	adc	r27, r27
    260e:	ee 1f       	adc	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	a2 17       	cp	r26, r18
    2614:	b3 07       	cpc	r27, r19
    2616:	e4 07       	cpc	r30, r20
    2618:	f5 07       	cpc	r31, r21
    261a:	20 f0       	brcs	.+8      	; 0x2624 <__udivmodsi4_ep>
    261c:	a2 1b       	sub	r26, r18
    261e:	b3 0b       	sbc	r27, r19
    2620:	e4 0b       	sbc	r30, r20
    2622:	f5 0b       	sbc	r31, r21

00002624 <__udivmodsi4_ep>:
    2624:	66 1f       	adc	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	1a 94       	dec	r1
    262e:	69 f7       	brne	.-38     	; 0x260a <__udivmodsi4_loop>
    2630:	60 95       	com	r22
    2632:	70 95       	com	r23
    2634:	80 95       	com	r24
    2636:	90 95       	com	r25
    2638:	9b 01       	movw	r18, r22
    263a:	ac 01       	movw	r20, r24
    263c:	bd 01       	movw	r22, r26
    263e:	cf 01       	movw	r24, r30
    2640:	08 95       	ret

00002642 <__prologue_saves__>:
    2642:	2f 92       	push	r2
    2644:	3f 92       	push	r3
    2646:	4f 92       	push	r4
    2648:	5f 92       	push	r5
    264a:	6f 92       	push	r6
    264c:	7f 92       	push	r7
    264e:	8f 92       	push	r8
    2650:	9f 92       	push	r9
    2652:	af 92       	push	r10
    2654:	bf 92       	push	r11
    2656:	cf 92       	push	r12
    2658:	df 92       	push	r13
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	ca 1b       	sub	r28, r26
    266c:	db 0b       	sbc	r29, r27
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	09 94       	ijmp

0000267a <__epilogue_restores__>:
    267a:	2a 88       	ldd	r2, Y+18	; 0x12
    267c:	39 88       	ldd	r3, Y+17	; 0x11
    267e:	48 88       	ldd	r4, Y+16	; 0x10
    2680:	5f 84       	ldd	r5, Y+15	; 0x0f
    2682:	6e 84       	ldd	r6, Y+14	; 0x0e
    2684:	7d 84       	ldd	r7, Y+13	; 0x0d
    2686:	8c 84       	ldd	r8, Y+12	; 0x0c
    2688:	9b 84       	ldd	r9, Y+11	; 0x0b
    268a:	aa 84       	ldd	r10, Y+10	; 0x0a
    268c:	b9 84       	ldd	r11, Y+9	; 0x09
    268e:	c8 84       	ldd	r12, Y+8	; 0x08
    2690:	df 80       	ldd	r13, Y+7	; 0x07
    2692:	ee 80       	ldd	r14, Y+6	; 0x06
    2694:	fd 80       	ldd	r15, Y+5	; 0x05
    2696:	0c 81       	ldd	r16, Y+4	; 0x04
    2698:	1b 81       	ldd	r17, Y+3	; 0x03
    269a:	aa 81       	ldd	r26, Y+2	; 0x02
    269c:	b9 81       	ldd	r27, Y+1	; 0x01
    269e:	ce 0f       	add	r28, r30
    26a0:	d1 1d       	adc	r29, r1
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	ed 01       	movw	r28, r26
    26ae:	08 95       	ret

000026b0 <itoa>:
    26b0:	fb 01       	movw	r30, r22
    26b2:	9f 01       	movw	r18, r30
    26b4:	e8 94       	clt
    26b6:	42 30       	cpi	r20, 0x02	; 2
    26b8:	c4 f0       	brlt	.+48     	; 0x26ea <itoa+0x3a>
    26ba:	45 32       	cpi	r20, 0x25	; 37
    26bc:	b4 f4       	brge	.+44     	; 0x26ea <itoa+0x3a>
    26be:	4a 30       	cpi	r20, 0x0A	; 10
    26c0:	29 f4       	brne	.+10     	; 0x26cc <itoa+0x1c>
    26c2:	97 fb       	bst	r25, 7
    26c4:	1e f4       	brtc	.+6      	; 0x26cc <itoa+0x1c>
    26c6:	90 95       	com	r25
    26c8:	81 95       	neg	r24
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	64 2f       	mov	r22, r20
    26ce:	77 27       	eor	r23, r23
    26d0:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodhi4>
    26d4:	80 5d       	subi	r24, 0xD0	; 208
    26d6:	8a 33       	cpi	r24, 0x3A	; 58
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <itoa+0x2c>
    26da:	89 5d       	subi	r24, 0xD9	; 217
    26dc:	81 93       	st	Z+, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	a1 f7       	brne	.-24     	; 0x26cc <itoa+0x1c>
    26e4:	16 f4       	brtc	.+4      	; 0x26ea <itoa+0x3a>
    26e6:	5d e2       	ldi	r21, 0x2D	; 45
    26e8:	51 93       	st	Z+, r21
    26ea:	10 82       	st	Z, r1
    26ec:	c9 01       	movw	r24, r18
    26ee:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <strrev>

000026f2 <strrev>:
    26f2:	dc 01       	movw	r26, r24
    26f4:	fc 01       	movw	r30, r24
    26f6:	67 2f       	mov	r22, r23
    26f8:	71 91       	ld	r23, Z+
    26fa:	77 23       	and	r23, r23
    26fc:	e1 f7       	brne	.-8      	; 0x26f6 <strrev+0x4>
    26fe:	32 97       	sbiw	r30, 0x02	; 2
    2700:	04 c0       	rjmp	.+8      	; 0x270a <strrev+0x18>
    2702:	7c 91       	ld	r23, X
    2704:	6d 93       	st	X+, r22
    2706:	70 83       	st	Z, r23
    2708:	62 91       	ld	r22, -Z
    270a:	ae 17       	cp	r26, r30
    270c:	bf 07       	cpc	r27, r31
    270e:	c8 f3       	brcs	.-14     	; 0x2702 <strrev+0x10>
    2710:	08 95       	ret

00002712 <__udivmodhi4>:
    2712:	aa 1b       	sub	r26, r26
    2714:	bb 1b       	sub	r27, r27
    2716:	51 e1       	ldi	r21, 0x11	; 17
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <__udivmodhi4_ep>

0000271a <__udivmodhi4_loop>:
    271a:	aa 1f       	adc	r26, r26
    271c:	bb 1f       	adc	r27, r27
    271e:	a6 17       	cp	r26, r22
    2720:	b7 07       	cpc	r27, r23
    2722:	10 f0       	brcs	.+4      	; 0x2728 <__udivmodhi4_ep>
    2724:	a6 1b       	sub	r26, r22
    2726:	b7 0b       	sbc	r27, r23

00002728 <__udivmodhi4_ep>:
    2728:	88 1f       	adc	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	5a 95       	dec	r21
    272e:	a9 f7       	brne	.-22     	; 0x271a <__udivmodhi4_loop>
    2730:	80 95       	com	r24
    2732:	90 95       	com	r25
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	08 95       	ret

0000273a <_exit>:
    273a:	f8 94       	cli

0000273c <__stop_program>:
    273c:	ff cf       	rjmp	.-2      	; 0x273c <__stop_program>
